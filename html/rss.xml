<?xml version="1.0" encoding="utf-8" ?><rss version="2.0" xml:base="https://jamesfriend.com.au/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:foaf="http://xmlns.com/foaf/0.1/" xmlns:og="http://ogp.me/ns#" xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#" xmlns:sioc="http://rdfs.org/sioc/ns#" xmlns:sioct="http://rdfs.org/sioc/types#" xmlns:skos="http://www.w3.org/2004/02/skos/core#" xmlns:xsd="http://www.w3.org/2001/XMLSchema#">
  <channel>
    <title>James Friend - Web Platform Adventures &amp; PC Archeology</title>
    <link>https://jamesfriend.com.au/</link>
    <description></description>
    <language>en</language>
     <atom:link href="https://jamesfriend.com.au/rss.xml" rel="self" type="application/rss+xml" />
      <item>
    <title>How do binary and hexadecimal numbers work?</title>
    <link>https://jamesfriend.com.au/how-do-binary-and-hexadecimal-numbers-work</link>
    <description>&lt;div class=&quot;field field-name-body field-type-text-with-summary field-label-hidden&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot; property=&quot;content:encoded&quot;&gt;&lt;p&gt;&lt;em&gt;This post is from a series I&#039;m writing in which we&#039;ll learn how computers work, by writing a computer simulator in Javascript. However, I figured an explanation of binary and hexadecimal numbers is useful enough by itself, so here it is!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Before explaining how computers load data into their working space and process it, it&#039;s valuable to understand binary and hexadecimal numbers. This is because computer hardware only understands binary values due to the physical characteristics of the electronic circuitry used to implement them. I won&#039;t go further into explaining the reasons why computer hardware works with values in binary form, but you can read more about it &lt;a href=&quot;http://nookkin.com/articles/computer-science/why-computers-use-binary.ndoc&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So what is binary? Binary is a &#039;base-2 number system&#039;. But what does that mean?&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description>
     <pubDate>Thu, 29 Dec 2016 03:20:14 +0000</pubDate>
 <dc:creator>James</dc:creator>
 <guid isPermaLink="false">15 at https://jamesfriend.com.au</guid>
  </item>
  <item>
    <title>Better assertions for shallow-rendered React components</title>
    <link>https://jamesfriend.com.au/better-assertions-shallow-rendered-react-components</link>
    <description>&lt;div class=&quot;field field-name-body field-type-text-with-summary field-label-hidden&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot; property=&quot;content:encoded&quot;&gt;&lt;p&gt;The React TestUtils &lt;a href=&quot;https://facebook.github.io/react/docs/test-utils.html#shallow-rendering&quot;&gt;shallow rendering&lt;/a&gt; feature allows us to test React components in true isolation from other component classes, and removes the need for a DOM in the test environment. It does this by allowing us to test the return value of a component&#039;s &lt;code&gt;render&lt;/code&gt; method, without
instantiating any subcomponents.&lt;/p&gt;

&lt;p&gt;A basic example of how it can be used, assuming we&#039;re testing a component called &lt;code&gt;&amp;lt;Page /&amp;gt;&lt;/code&gt;:&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description>
     <pubDate>Tue, 15 Sep 2015 13:38:21 +0000</pubDate>
 <dc:creator>James</dc:creator>
 <guid isPermaLink="false">14 at https://jamesfriend.com.au</guid>
  </item>
  <item>
    <title>Installing Pygame for Python 3 on Mac OS Yosemite</title>
    <link>https://jamesfriend.com.au/installing-pygame-python-3-mac-os-yosemite</link>
    <description>&lt;div class=&quot;field field-name-body field-type-text-with-summary field-label-hidden&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot; property=&quot;content:encoded&quot;&gt;&lt;p&gt;It&#039;s somewhat difficult to find instructions on how to successfully install Pygame for Python 3 on Yosemite. The front page of the Pygame website has a link which appears to point to installation instructions, but it is broken.&lt;/p&gt;

&lt;p&gt;Fortunately, someone posted &lt;a href=&quot;http://pygame.org/wiki/macintosh&quot;&gt;these instructions&lt;/a&gt; on the Pygame wiki:&lt;/p&gt;

&lt;p&gt;Firstly, ensure you have the Apple Xcode command line tools installed:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;xcode-select --install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Install XQuartz from &lt;a href=&quot;http://xquartz.macosforge.org/landing/&quot;&gt;http://xquartz.macosforge.org/landing/&lt;/a&gt;.
Restart your computer so the newly installed XQuartz is used.&lt;/p&gt;

&lt;p&gt;Make sure you have &lt;a href=&quot;http://brew.sh/&quot;&gt;homebrew&lt;/a&gt; installed:&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description>
     <pubDate>Sat, 20 Dec 2014 05:36:59 +0000</pubDate>
 <dc:creator>superuser</dc:creator>
 <guid isPermaLink="false">13 at https://jamesfriend.com.au</guid>
  </item>
  <item>
    <title>Running a Hypercard stack on a modern Mac</title>
    <link>https://jamesfriend.com.au/running-hypercard-stack-2014</link>
    <description>&lt;div class=&quot;field field-name-field-image field-type-image field-label-hidden&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot; rel=&quot;og:image rdfs:seeAlso&quot; resource=&quot;https://jamesfriend.com.au/sites/default/files/styles/full_width/public/field/image/Screen%20Shot%202014-02-12%20at%2010.00.43%20pm_0.png&quot;&gt;&lt;a href=&quot;/running-hypercard-stack-2014&quot;&gt;&lt;img typeof=&quot;foaf:Image&quot; src=&quot;https://jamesfriend.com.au/sites/default/files/styles/full_width/public/field/image/Screen%20Shot%202014-02-12%20at%2010.00.43%20pm_0.png&quot; width=&quot;870&quot; height=&quot;477&quot; alt=&quot;Hypercard in SheepShaver emulator&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-body field-type-text-with-summary field-label-hidden&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot; property=&quot;content:encoded&quot;&gt;&lt;p&gt;&lt;strong&gt;Updated: now works on Yosemite&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A bunch of people have emailed me about getting Hypercard stacks running under emulation. 
Here is a pretty easy guide to running a Hypercard stack on a recent Mac (eg. running Mavericks, Mountain Lion, etc):&lt;/p&gt;

&lt;p&gt;Place the Hypercard stack you want to access somewhere within your user folder: eg. Documents, or Desktop.&lt;/p&gt;

&lt;p&gt;Download &lt;a href=&quot;/hypercard/hypercard-ca520e219.sheepvm.zip&quot;&gt;this zip file&lt;/a&gt; [95mb] containing the &lt;a href=&quot;http://sheepshaver.cebix.net/&quot;&gt;SheepShaver&lt;/a&gt; classic Mac emulator bundled with Mac OS 9 and Hypercard.&lt;/p&gt;

&lt;p&gt;Extract and open &lt;code&gt;hypercard.sheepvm&lt;/code&gt;. This should boot Mac OS 9.&lt;/p&gt;

&lt;p&gt;On the Mac OS 9 desktop there should be a disk called &quot;Unix&quot;. This is a virtual disk which actually lets you access files on your computer (eg. outside the emulator). Opening it is equivalent to opening your OS X &lt;code&gt;/Users/&lt;/code&gt; directory.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description>
     <pubDate>Thu, 06 Feb 2014 14:32:17 +0000</pubDate>
 <dc:creator>James</dc:creator>
 <guid isPermaLink="false">11 at https://jamesfriend.com.au</guid>
  </item>
  <item>
    <title>Why port emulators to the browser?</title>
    <link>https://jamesfriend.com.au/why-port-emulators-browser</link>
    <description>&lt;div class=&quot;field field-name-field-image field-type-image field-label-hidden&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot; rel=&quot;og:image rdfs:seeAlso&quot; resource=&quot;https://jamesfriend.com.au/sites/default/files/styles/full_width/public/field/image/macpaint-woodblock_0.png&quot;&gt;&lt;a href=&quot;/why-port-emulators-browser&quot;&gt;&lt;img typeof=&quot;foaf:Image&quot; src=&quot;https://jamesfriend.com.au/sites/default/files/styles/full_width/public/field/image/macpaint-woodblock_0.png&quot; width=&quot;513&quot; height=&quot;343&quot; alt=&quot;MacPaint Woodblock sample image&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-body field-type-text-with-summary field-label-hidden&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot; property=&quot;content:encoded&quot;&gt;&lt;p&gt;In a discussion on Hacker News about emulators being ported to the browser, I drew attention to my own project, &lt;a href=&quot;/pce-js/&quot;&gt;PCE.js&lt;/a&gt;, which emulates a &lt;a href=&quot;http://en.wikipedia.org/wiki/Macintosh_Plus&quot;&gt;Macintosh Plus&lt;/a&gt; and an &lt;a href=&quot;http://en.wikipedia.org/wiki/IBM_Personal_Computer_XT&quot;&gt;IBM PC/XT&lt;/a&gt;. Some of the questions brought up included why someone would undertake such a project, and also the legal considerations of including the software ROM required to boot the machine.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description>
     <pubDate>Fri, 18 Oct 2013 06:42:40 +0000</pubDate>
 <dc:creator>James</dc:creator>
 <guid isPermaLink="false">9 at https://jamesfriend.com.au</guid>
  </item>
  <item>
    <title>PCE.js - Classic Mac OS in the browser</title>
    <link>https://jamesfriend.com.au/pcejs-classic-mac-os-browser</link>
    <description>&lt;div class=&quot;field field-name-field-image field-type-image field-label-hidden&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot; rel=&quot;og:image rdfs:seeAlso&quot; resource=&quot;https://jamesfriend.com.au/sites/default/files/styles/full_width/public/field/image/pcejs.png&quot;&gt;&lt;a href=&quot;/pcejs-classic-mac-os-browser&quot;&gt;&lt;img typeof=&quot;foaf:Image&quot; src=&quot;https://jamesfriend.com.au/sites/default/files/styles/full_width/public/field/image/pcejs.png&quot; width=&quot;820&quot; height=&quot;656&quot; alt=&quot;PCE.js MacPaint screenshot&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-body field-type-text-with-summary field-label-hidden&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot; property=&quot;content:encoded&quot;&gt;&lt;p&gt;I&#039;ve just completed porting Hampa Hug&#039;s excellent &lt;a href=&quot;http://www.hampa.ch/pce/&quot;&gt;PCE&lt;/a&gt; emulator to run in the browser, using Emscripten. I&#039;ve mainly focused on the pce-macplus build. This is pretty awesome because it means you can run classic Mac OS in the browser. Check it out: &lt;a href=&quot;/pce-js/&quot;&gt;PCE.js - Classic Mac OS in the browser&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I&#039;ve also got the pce-ibmpc build working (emulating an IBM compatible, up to a 286 CPU), and and pce-atarist, an Atari ST emulator also, with browser demos coming soon for each.&lt;/p&gt;

&lt;p&gt;A dump of the source is available &lt;a href=&quot;/pce-js/pcejs20131028.zip&quot;&gt;here&lt;/a&gt; but I&#039;ll try to clean it up and make it available on GitHub when I get the chance.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update: source on &lt;a href=&quot;https://github.com/jsdf/pce&quot;&gt;GitHub&lt;/a&gt;, and I&#039;ve added an &lt;a href=&quot;/pce-js/ibmpc-games/&quot;&gt;IBM PC Demo&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description>
     <pubDate>Fri, 20 Sep 2013 04:56:44 +0000</pubDate>
 <dc:creator>James</dc:creator>
 <guid isPermaLink="false">8 at https://jamesfriend.com.au</guid>
  </item>
  <item>
    <title>Working implementation of SDL_CreateRGBSurfaceFrom for Emscripten</title>
    <link>https://jamesfriend.com.au/working-implementation-sdlcreatergbsurfacefrom-emscripten</link>
    <description>&lt;div class=&quot;field field-name-body field-type-text-with-summary field-label-hidden&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot; property=&quot;content:encoded&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/kripken/emscripten&quot;&gt;Emscripten&lt;/a&gt; is an awesome tool for porting existing native codebases to the browser. There are a bunch of cool projects using it to port graphical applications such as games and emulators, especially those which already use the &lt;a href=&quot;http://www.libsdl.org/&quot;&gt;SDL library&lt;/a&gt; as a cross-platform video, sound and I/O abstraction. Leveraging the fact that the SDL abstractions provide portability across different OS platforms means that by implementing of parts of SDL in Javascript and compiling the code via Emscripten, the browser can become (with some caveats) another SDL target platform. However, Emscripten&#039;s SDL &#039;shims&#039; are still very much a work in progress, and in a current project of my own (porting a classic Mac OS emulator), I&#039;ve run into some parts where I&#039;ve had to fill in the gaps myself.&lt;/p&gt;

&lt;p&gt;Specifically, if you&#039;re finding your SDL-based, Emscripten compiled app is failing to render to the canvas, the issue may be that the app is trying to use the incomplete &lt;code&gt;SDL_CreateRGBSurfaceFrom&lt;/code&gt; method to create an SDL surface from a buffer of pixels.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description>
     <pubDate>Tue, 13 Aug 2013 10:55:44 +0000</pubDate>
 <dc:creator>James</dc:creator>
 <guid isPermaLink="false">7 at https://jamesfriend.com.au</guid>
  </item>
  <item>
    <title>Installing Pygame on Mac OS 10.8 Mountain Lion</title>
    <link>https://jamesfriend.com.au/installing-pygame-python-mac-os-108-mountain-lion</link>
    <description>&lt;div class=&quot;field field-name-body field-type-text-with-summary field-label-hidden&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot; property=&quot;content:encoded&quot;&gt;&lt;p&gt;I decided to install and play around with Pygame today, mainly as an excuse to write some Python for a minor departure from all the Javascript/Coffeescript I&#039;ve been writing lately. Unfortunately the process wasn&#039;t entirely frictionless, due to Pygame not yet accounting for Apple&#039;s move to XQuartz as the recommended X11 implementation for Mac OS as of 10.8 Mountain Lion. As a result I ran into some compilation errors while Pygame was building it&#039;s native extensions, which fortunately were not too hard to fix as I had some familiarity with changes to X11 on Mountain Lion.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description>
     <pubDate>Wed, 07 Aug 2013 08:34:15 +0000</pubDate>
 <dc:creator>James</dc:creator>
 <guid isPermaLink="false">6 at https://jamesfriend.com.au</guid>
  </item>
  <item>
    <title>Caniuse.com Mirror</title>
    <link>https://jamesfriend.com.au/caniusecom-mirror</link>
    <description>&lt;div class=&quot;field field-name-body field-type-text-with-summary field-label-hidden&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot; property=&quot;content:encoded&quot;&gt;&lt;p&gt;&lt;strong&gt;UPDATE: original site is back online, I took down the mirror&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I rely on &lt;a href=&quot;http://caniuse.com&quot;&gt;caniuse.com&lt;/a&gt; to look up browser compatibility of various new features in CSS, JS, SVG etc.  I noticed the other day that seems to be down (possibly pending a re-launch). Considering it&#039;s such a useful resource I decided to extract it from Google&#039;s cache and throw up a mirror.&lt;/p&gt;

&lt;p&gt;You can find it at &lt;a href=&quot;http://caniuse.jsdf.co&quot;&gt;caniuse.jsdf.co&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description>
     <pubDate>Fri, 12 Jul 2013 11:30:13 +0000</pubDate>
 <dc:creator>James</dc:creator>
 <guid isPermaLink="false">5 at https://jamesfriend.com.au</guid>
  </item>
  <item>
    <title>Hacker News theme</title>
    <link>https://jamesfriend.com.au/hacker-news-theme</link>
    <description>&lt;div class=&quot;field field-name-field-image field-type-image field-label-hidden&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot; rel=&quot;og:image rdfs:seeAlso&quot; resource=&quot;https://jamesfriend.com.au/sites/default/files/styles/full_width/public/field/image/hacker-news-neue.png&quot;&gt;&lt;a href=&quot;/hacker-news-theme&quot;&gt;&lt;img typeof=&quot;foaf:Image&quot; src=&quot;https://jamesfriend.com.au/sites/default/files/styles/full_width/public/field/image/hacker-news-neue.png&quot; width=&quot;870&quot; height=&quot;599&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-body field-type-text-with-summary field-label-hidden&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot; property=&quot;content:encoded&quot;&gt;&lt;p&gt;A while back I restyled Hacker News using the Stylebot extension for Chrome. Initially I just wanted to apply a fixed width, as the site&#039;s fluid layout can result in some very long lines on a large/wide display.&lt;/p&gt;

&lt;p&gt;Over time I added in some other usability improvements, such as:&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;larger &#039;vote&#039; buttons with more space in between them, which helps to avoid mis-clicks on the downvote arrow (a common complaint on HN)&lt;/li&gt;
&lt;li&gt;stronger delineation between unread and read articles, using a faint cyan highlight on those which are unread, while read articles almost fade into the background&lt;/li&gt;
&lt;li&gt;monospace fonts optimised for code&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Works best with Helvetica Neue and Menlo installed (as they are by default on Mac OS). Alternatively, Anonymous Pro will be used for code if installed.&lt;/p&gt;

&lt;p&gt;Vote arrows use the &lt;a href=&quot;http://css-tricks.com/snippets/css/css-triangle/&quot;&gt;CSS border based triangle&lt;/a&gt; technique.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description>
     <pubDate>Sat, 25 May 2013 04:38:35 +0000</pubDate>
 <dc:creator>James</dc:creator>
 <guid isPermaLink="false">4 at https://jamesfriend.com.au</guid>
  </item>
  </channel>
</rss>
