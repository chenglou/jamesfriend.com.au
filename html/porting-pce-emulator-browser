{{{block_0}}}
<meta name="description" content="In a discussion on Hacker News about emulators being ported to the browser, I drew attention to my own project, [PCE.js](/pce-js/), which emulates a [Macintosh Plus](http://en.wikipedia.org/wiki/Macintosh_Plus) and an [IBM PC/XT](http://en.wikipedia.org/wiki/IBM_Personal_Computer_XT). Some of the questions brought up included why someone would undertake such a project, and also the legal considerations of including the software ROM required to boot the machine."/>
<meta name="generator" content="Drupal 7 (http://drupal.org)"/>
<link rel="canonical" href="https://jamesfriend.com.au/porting-pce-emulator-browser"/>
 
{{{meta_viewport}}}
<title>Porting the PCE emulator to the browser | James Friend</title>
{{{common_css}}}
{{{common_js}}}
<script type="text/javascript">
<!--//--><![CDATA[//><!--
jQuery.extend(Drupal.settings, {"basePath":"\/","pathPrefix":"","ajaxPageState":{"theme":"jf","theme_token":"x-WOHr4JLXn-Tw6Mh2k4TaQ0uLGulRW7JBCucc2AxMc","js":{"misc\/jquery.js":1,"misc\/jquery.once.js":1,"misc\/drupal.js":1,"sites\/all\/modules\/google_analytics\/googleanalytics.js":1,"0":1,"sites\/all\/themes\/open_framework\/js\/jquery-1.8.2.min.js":1,"sites\/all\/themes\/open_framework\/bootstrap\/js\/bootstrap.min.js":1,"sites\/all\/themes\/open_framework\/js\/open_framework.js":1,"sites\/all\/themes\/open_framework\/js\/override.js":1,"sites\/default\/themes\/jf\/js\/prism.custom.js":1,"sites\/default\/themes\/jf\/js\/script.js":1},"css":{"modules\/system\/system.base.css":1,"modules\/system\/system.menus.css":1,"modules\/system\/system.messages.css":1,"modules\/system\/system.theme.css":1,"modules\/field\/theme\/field.css":1,"modules\/node\/node.css":1,"modules\/search\/search.css":1,"modules\/user\/user.css":1,"sites\/all\/modules\/views\/css\/views.css":1,"sites\/all\/modules\/ctools\/css\/ctools.css":1,"sites\/all\/themes\/open_framework\/bootstrap\/css\/bootstrap.min.css":1,"sites\/all\/themes\/open_framework\/bootstrap\/css\/bootstrap-responsive.min.css":1,"sites\/all\/themes\/open_framework\/css\/open_framework.css":1,"sites\/default\/themes\/jf\/css\/flat-ui.css":1,"sites\/default\/themes\/jf\/css\/prism.custom.css":1,"sites\/default\/themes\/jf\/css\/jf.css.less":1}},"googleanalytics":{"trackOutbound":1,"trackMailto":1,"trackDownload":1,"trackDownloadExtensions":"7z|aac|arc|arj|asf|asx|avi|bin|csv|doc(x|m)?|dot(x|m)?|exe|flv|gif|gz|gzip|hqx|jar|jpe?g|js|mp(2|3|4|e?g)|mov(ie)?|msi|msp|pdf|phps|png|ppt(x|m)?|pot(x|m)?|pps(x|m)?|ppam|sld(x|m)?|thmx|qtm?|ra(m|r)?|sea|sit|tar|tgz|torrent|txt|wav|wma|wmv|wpd|xls(x|m|b)?|xlt(x|m)|xlam|xml|z|zip"}});
//--><!]]>
</script>
 

</head>
<body class="html not-front not-logged-in one-sidebar sidebar-second page-node page-node- page-node-9 node-type-article      ">
<div class="contents">
<div id="header" class="clearfix">
<div class="container">
<div class="row">
<div class="span12">
<div id="name-and-slogan">
<div id="site-name"><a href="/" title="Home" rel="home">James Friend</a></div>
<div id="site-slogan">Web Platform Adventures &amp; PC Archeology</div>
</div>
 
</div>
</div>
</div>
</div>
 
<div id="main" class="clearfix">
<div class="container">
<div id="breadcrumb"><h2 class="element-invisible">You are here</h2><div class="breadcrumb"><a href="/">Home</a></div></div>
<div id="main-content" class="row">
<div id="content" class="span9">
<div id="content-wrapper">
<div id="content-head" class="row-fluid">
<div id="highlighted" class="clearfix"></div>
<h1 class="title" id="page-title"> Porting the PCE emulator to the browser </h1>
<div class="tabs"> </div>
</div>
<div id="content-body" class="row-fluid"> <div class="region region-content clearfix">
<div id="block-system-main" class="clearfix block block-system"> <div class="content"> <div id="node-9" class="node node-article node-promoted clearfix" about="/porting-pce-emulator-browser" typeof="sioc:Item foaf:Document">
<span property="dc:title" content="Porting the PCE emulator to the browser" class="rdf-meta element-hidden"></span>
<div class="submitted">
<span property="dc:date dc:created" content="2017-4-11T12:18:40-08:00" datatype="xsd:dateTime" rel="sioc:has_creator">Submitted by <span class="username" xml:lang="" about="/user/7" typeof="sioc:UserAccount" property="foaf:name" datatype="">James</span> on April 16, 2017 - 12:18</span> </div>
<div class="content">
<div class="field field-name-field-image field-type-image field-label-hidden"><div class="field-items"><div class="field-item even" rel="og:image rdfs:seeAlso" resource="https://jamesfriend.com.au/sites/default/files/styles/full_width/public/field/image/macpaint-woodblock_0.png"><img typeof="foaf:Image" src="https://jamesfriend.com.au/sites/default/files/styles/full_width/public/field/image/macpaint-woodblock_0.png" width="513" height="343" alt="MacPaint Woodblock sample image"/></div></div></div><div class="field field-name-body field-type-text-with-summary field-label-hidden"><div class="field-items"><div class="field-item even" property="content:encoded">

<p>The <a href="https://archive.org">Internet Archive</a> recently added the original Macintosh to the list of classic
computers of which they provide emulation, so you can play with the software
titles in their archive <a href="https://archive.org/details/softwarelibrary_mac">in your browser</a>, without installing anything. This is great because it provides
the same level of accessibility and convenience to emulation as you'd expect of
playing a media file or viewing a document.</p>

<p>When you start up the emulated computer on these pages of the Internet Archive,
you're running the <a href="http://hampa.ch/pce/">PCE</a> emulator, originally a piece of software intended to run
natively on desktop operating systems, which has been adapted and recompiled to
run in your web browser. As the person who did the initial work of porting this
emulator, I thought it would be worthwhile to provide a run-down of the tools and
gross hacks which made this possible.</p>

<p>Firstly, I got the emulator's C codebase to compile to ASM.js-compatible Javascript
using <a href="https://kripken.github.io/emscripten-site/">Emscripten</a>. This involved adjusting the project's GNU Autotools-based build system
to use Emscripten's emcc compiler executable instead of gcc. Emscripten's wrapper
for Autotools' configure, called emconfigure, does most of the work here. Emscripten
also handles the mapping of native APIs to browser equivalents, so SDL rendering
calls become Canvas API calls, browser input events become SDL events, etc.</p>

<p>Once the code compiled successfully and was able to start up in the browser without
crashing, the next issue to deal with was 'yielding' to the browser event loop. In
modern operating systems, native programs can run as one unbroken thread of execution. The program can rely on the operating system to manage the program's usage of the CPU,
interrupting it periodically so that other programs can do some work. The program
doesn't need to know when this will happen or do anything special to enable it.
We call this 'preemptive multitasking'. However, Javascript code running in the
web browser can't just run indefinitely, it must regularly yield control back to
the browser so that I/O can be performed (updating the screen, triggering mouse and
keyboard event handlers, etc). So I had to break the control flow of the emulator
code up, so that it could a 'chunk' of work, and then allow the browser to do it's
thing before the next chunk of work. You could draw a comparison between this and
a 'cooperative multitasking' operating system.</p>

<p>The way I achieved this was pretty blunt, but it worked. The emulator initializes
normally, and then instead of running the emulated system in an infinite loop, <a href="https://github.com/jsdf/pce/blob/6dee9246bf6cd265e3796a849d352aa4ef798037/src/arch/macplus/cmd_68k.c#L416">it
provides the Emscripten runtime with a callback function</a> which, when called, will
<a href="https://github.com/jsdf/pce/blob/6dee9246bf6cd265e3796a849d352aa4ef798037/src/arch/macplus/cmd_68k.c#L443">run a few clock cycles of the emulated computer's CPU</a>. By 'a few', I mean a few thousand. Emscripten calls this callback many times a second. Ideally we could yield back to the browser after every cycle
of the CPU, so that we could collect the latest inputs from the mouse and keyboard, and update the screen if necessary, but there are limits on how often the browser can process
chunks of Javascript work in its event loop (enqueued via a browser API call such as
setTimeout or requestAnimationFrame) which mean that to achieve reasonable performance
of the emulator we need to run a bunch of cycles for each yield. I hand-tuned this,
and found that ~10000 cycles per yield gives a decent balance of speed and responsiveness
of the emulator.</p>

<p>Finally, there was the issue of mouse pointer integration. At this point, moving
your mouse around the browser window resulted in the relative mouse movements being
passed to the emulator, which in turn are provided to Mac OS as emulated hardware
mouse movements. Mac OS moves the mouse in on the emulator's screen, but it's not
necessarily in the same place as your OS' real mouse pointer. I felt I could do better,
so I added a super gross hack to actually update the emulated Mac OS mouse position
to match your real mouse cursor's position on the screen. You can see that happening
<a href="https://github.com/jsdf/pce/blob/6dee9246bf6cd265e3796a849d352aa4ef798037/src/arch/macplus/cmd_68k.c#L446-L458">here</a>. I realised that in classic Mac OS, the mouse
position is stored in a few fixed absolute locations in the computer's memory, called
'low memory globals'. Basically, I directly write the mouse position value into the
emulated computer's memory. Gross, right? But it works great, as you can see by
<a href="https://jamesfriend.com.au/pce-js/">drawing some stuff in Kid Pix</a>. The mouse
responds perfectly. You can read more about low memory globals in <a href="http://www.folklore.org/StoryView.py?story=Mea_Culpa.txt">this folklore.org story</a>.
</p>

<p>I'm really glad Classic Mac emulation made its way onto archive.org, because I
think everybody should have the opportunity to experience computing history, and
the original Macintosh is an essential piece of that history.</p>

<p>If you're wondering about my rationale for porting emulators
to the browser, have a read of <a href="https://jamesfriend.com.au/why-port-emulators-browser">my previous post on the subject</a></p>.


</div></div></div><div class="field field-name-field-tags field-type-taxonomy-term-reference field-label-above"><div class="field-label">Tags:&nbsp;</div><div class="field-items"><div class="field-item even" rel="dc:subject"><a href="/tags/pce" typeof="skos:Concept" property="rdfs:label skos:prefLabel" datatype="">pce</a></div><div class="field-item odd" rel="dc:subject"><a href="/tags/macplus" typeof="skos:Concept" property="rdfs:label skos:prefLabel" datatype="">macplus</a></div><div class="field-item even" rel="dc:subject"><a href="/tags/mac" typeof="skos:Concept" property="rdfs:label skos:prefLabel" datatype="">mac</a></div><div class="field-item odd" rel="dc:subject"><a href="/tags/javascript" typeof="skos:Concept" property="rdfs:label skos:prefLabel" datatype="">javascript</a></div><div class="field-item even" rel="dc:subject"><a href="/tags/copyright" typeof="skos:Concept" property="rdfs:label skos:prefLabel" datatype="">copyright</a></div><div class="field-item odd" rel="dc:subject"><a href="/tags/computer-history" typeof="skos:Concept" property="rdfs:label skos:prefLabel" datatype="">computer history</a></div><div class="field-item even" rel="dc:subject"><a href="/tags/emulation" typeof="skos:Concept" property="rdfs:label skos:prefLabel" datatype="">emulation</a></div></div></div> </div>
</div>
</div>
</div></div>
 
</div>
</div>
 
</div>
 
<div id="sidebar-second" class="sidebar span3">
<div class="row-fluid"><div class="region region-sidebar-second clearfix">
<div id="block-block-1" class="clearfix block block-block"> <h2>Hi! I&#039;m James.</h2>
<div class="content"> <div class="pic-me">
<img src="/files/corndog.jpeg" title="James Friend" alt="James Friend">
</div>
<p>I work at Facebook and make neat stuff on the web.<br> I'm into UX, music production, designing the future, and learning from the past.</p>
</div>
</div>
<div id="block-block-3" class="clearfix block block-block"> <h2>Drop me a line</h2>
<div class="content"> <ul>
<li><a href="&#109;&#97;&#x69;l&#116;&#x6f;&#x3a;j&#97;&#x6d;&#x65;&#115;&#64;&#x6a;&#x73;&#100;&#102;&#x2e;&#x63;&#111;">Email</a></li>
<li><a href="https://twitter.com/ur_friend_james">Twitter</a></li>
<li><a href="https://github.com/jsdf">GitHub</a></li>
<li><a href="http://www.linkedin.com/in/jamesfriendau">LinkedIn</a></li>
</ul>
</div>
</div>
</div>
 
</div>
</div>
 
</div>
</div>
</div>
 
</div>
</body>
</html>