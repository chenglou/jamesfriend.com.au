{
  "1": {
    "id": "1",
    "slug": "content/hi",
    "title": " Hi. ",
    "author": {
      "username": "James",
      "id": "7"
    },
    "body": "<div class=\"field-item even\" property=\"content:encoded\"><p>So I finally got round to putting together a new blog. Theme soon to come.</p>\n<p>It will be based on Stanford&apos;s <a href=\"https://openframework.stanford.edu\">Open Framework</a> Drupal theme, which in turn is based on Twitter Bootstrap.</p>\n</div>",
    "body_text": "So I finally got round to putting together a new blog. Theme soon to come.\nIt will be based on Stanford's Open Framework Drupal theme, which in turn is based on Twitter Bootstrap.\n",
    "body_preview": "So I finally got round to putting together a new blog. Theme soon to come.",
    "created": "2013-01-20T16:35:41+08:00"
  },
  "3": {
    "id": "3",
    "slug": "content/setting-new-mac-nodejs-and-drupal-development",
    "title": " Setting up a new Mac for Node.js and Drupal development ",
    "author": {
      "username": "James",
      "id": "7"
    },
    "body": "<div class=\"field-item even\" property=\"content:encoded\"><p><strong>UPDATE:</strong> I am now of the opinion that you&apos;re probably better off installing homebrew with a prefix of somewhere inside your user directory, eg. <code>~/.homebrew/</code>. I mention this below as an alternative, but now this would be my primary recommendation. Some parts, however, such as configuring the Apple-included Apache installation, and the custom DNS resolvers, are system-wide changes, so you might not want to couple them to a particular user account. Perhaps consider <code>brew install</code>ing a user-local copy of Apache, but use a system level installation of dnsmasq.</p>\n<p><strong>Original article text follows:</strong></p>\n<p>So you&apos;ve got a fresh, clean Mountain Lion install and you need to get up and running for local development. Recently I spent a day doing just that, so I thought I&apos;d write it all down, to save me from having to look all this stuff up again.</p>\n<h4>Install Xcode Command Line Tools</h4>\n<p>Available from the <a href=\"https://developer.apple.com/downloads/index.action\">Apple Developer downloads area</a>. You&apos;ll need an Apple ID.</p>\n<p>This package includes llvm-gcc, which is a (mostly) compatible replacement for gcc. It will work for most homebrew formulas which build with gcc.</p>\n<h4>Install homebrew</h4>\n<p><a href=\"http://mxcl.github.io/homebrew/\">homebrew</a> can be conveniently installed with one line in the Terminal. As with all curl-to-sh style install scripts, you should read the script first to make sure it&apos;s not going to do anything bad. Don&apos;t say I didn&apos;t warn you :)</p>\n<pre><code>ruby -e &quot;$(curl -fsSL https://raw.github.com/mxcl/homebrew/go)&quot;\n</code></pre>\n<p>The most convenient approach to using homebrew is to make <code>/usr/local</code> writable to admin group, if you don&#x2019;t mind a (sort of) security risk. Bear in mind, <code>/Applications</code> is writable by that group by default anyway, so unless you&apos;ve locked that down also, this won&apos;t really make your system much more insecure than it already is.</p>\n<pre><code>sudo chmod -R g+w /usr/local\n</code></pre>\n<p>Unfortunately without doing this, homebrew doesn&apos;t work particularly well in its default install location. Alternatively install somewhere user-local like <code>~/homebrew</code> if you&apos;re really concerned about security and locking down user permissions on your local machine.</p>\n<h4>Install Node.js</h4>\n<p>Node in particular is easier to install from the nodejs.org installer package, not homebrew. Due to some past disagreement between the maintainers of npm and homebrew, the homebrew formula for node doesn&#x2019;t properly install npm. The official installer, however, works pretty well.</p>\n<p>To get <code>npm install -g</code> working (without sudo) you may also want to change the global node_modules directory to have a group id of &apos;admin&apos;:</p>\n<pre><code>sudo chgrp -R admin /usr/local/lib/node_modules\n</code></pre>\n<p>You may also need to give g+w permissions to that directory tree, if you installed node after running the chmod command above. This comes with the same caveats as homebrew. If you&apos;re really security conscious, install node and npm somewhere in your user directory, rather than globally in <code>/usr</code>.</p>\n<h4>Install Redis &amp; MongoDB (optional)</h4>\n<pre><code>brew install redis\nredis-server\nbrew install mongodb\nmongod\n</code></pre>\n<h4>Install MySQL</h4>\n<pre><code>brew install mysql\n</code></pre>\n<p>Then follow the instructions depending on whether you want MySQL to run as your user account or a different one, where data should be stored and whether you want to start the daemon manually or run at login.</p>\n<p>Eg. to set up databases to run as your user account, with data in <code>/usr/local/var/mysql</code> and running at login:</p>\n<pre><code>unset TMPDIR\nmysql_install_db --verbose --user=`whoami` --basedir=&quot;$(brew --prefix mysql)&quot; --datadir=/usr/local/var/mysql --tmpdir=/tmp\n</code></pre>\n<p>To have launchd start mysql at login:</p>\n<pre><code>ln -sfv /usr/local/opt/mysql/*.plist ~/Library/LaunchAgents\n</code></pre>\n<p>Then to load mysql now:</p>\n<pre><code>launchctl load ~/Library/LaunchAgents/homebrew.mxcl.mysql.plist\n</code></pre>\n<p>Set up the root mysql account. Pick a better password than I have.</p>\n<pre><code>/usr/local/opt/mysql/bin/mysqladmin -u root password 123456\n</code></pre>\n<h4>Install PHP 5.4 (optional)</h4>\n<p>PHP is not in the main homebrew packages, so you&apos;ll need to &apos;tap&apos; some extra repos before you can install it.</p>\n<pre><code>brew tap homebrew/dupes\nbrew tap josegonzalez/homebrew-php\n</code></pre>\n<p>Update LoadModule directive in Apache config file to point to new PHP version</p>\n<pre><code># /etc/apache2/httpd.conf\n# Apple default:\n# LoadModule php5_module libexec/apache2/libphp5.so\n# This should be equivalent to $(brew --prefix php54)/libexec/apache2/libphp5.so\nLoadModule php5_module /usr/local/opt/php54/libexec/apache2/libphp5.so\n</code></pre>\n<p>Add updated PHP version to the PATH in <code>.bash_profile</code></p>\n<pre><code># ~/.bash_profile\nexport PATH=&quot;$(brew --prefix php54)/bin:$PATH&quot;\n</code></pre>\n<h4>MySQL socket location &amp; PHP PDO extension</h4>\n<p>When first running a PHP application which connects to MySQL, you may run in to errors relating to the socket through which PHP&apos;s PDO extension is attempting to connect to MySQL. This is because PDO is looking for the MySQL socket at <code>/var/mysql/mysql.sock</code>, but it&apos;s probably at <code>/tmp/mysql.sock</code> instead.</p>\n<p>Some options you have include setting up a php.ini file:</p>\n<pre><code>sudo cp /etc/php.ini.default /etc/php.ini\nsudo vi /etc/php.ini\n</code></pre>\n<p>and setting <code>pdo_mysql.default_socket=/tmp/mysql.sock</code> therein. If you go for the php.ini approach it might also be worth setting <code>display_errors = On</code> while you&apos;re there.</p>\n<p>Or you could use a symbolic link to make PHP happy:</p>\n<pre><code>sudo mkdir /var/mysql\nsudo ln -s /tmp/mysql.sock /var/mysql/mysql.sock\n</code></pre>\n<p>I&apos;m not really sure which solution is best, but both seem to do the job.</p>\n<h4>Set up .dev TLD for local development using dnsmasq</h4>\n<p>No one likes having to go and edit your hosts file, or something similarly tedious, every single time they create a new local project. By setting up a special TLD and dynamic vhosts, we can avoid ever having to waste time with this stuff again.</p>\n<pre><code>brew install dnsmasq\nmkdir -pv $(brew --prefix)/etc/\n</code></pre>\n<p>Configure dnsmasq</p>\n<pre><code>echo &apos;address=/.dev/127.0.0.1&apos; &gt; $(brew --prefix)/etc/dnsmasq.conf\n</code></pre>\n<p>Create LaunchDaemon so dnsmasq runs at startup</p>\n<pre><code>sudo cp -v $(brew --prefix dnsmasq)/homebrew.mxcl.dnsmasq.plist /Library/LaunchDaemons\nsudo launchctl load -w /Library/LaunchDaemons/homebrew.mxcl.dnsmasq.plist\n</code></pre>\n<p>Set up a custom resolver to delegate resolution for .dev domains to dnsmasq</p>\n<pre><code>sudo mkdir -v /etc/resolver\nsudo bash -c &apos;echo &quot;nameserver 127.0.0.1&quot; &gt; /etc/resolver/dev&apos;\n</code></pre>\n<h4>Set up dynamically configured mass virtual hosting in Apache</h4>\n<p>Ideally, all you should need to do to spool up a new site for development is create a directory under <code>/srv/www</code>.\nThis Apache config should let you do just that.\nCreate /etc/apache2/other/mass-vhost.conf:</p>\n<pre><code>&lt;Directory /srv/www&gt;\n  Order Deny,Allow\n  Allow from all\n  AllowOverride All\n&lt;/Directory&gt;\n\nNameVirtualHost *:80\n&lt;VirtualHost *:80&gt;\n  # get the server name from the Host: header\n  UseCanonicalName Off\n  # include the server name in the filenames used to satisfy requests\n  VirtualDocumentRoot /srv/www/%1\n&lt;/VirtualHost&gt;\n</code></pre>\n<h4>Create your sites directory</h4>\n<pre><code>sudo mkdir -p /srv/www\nsudo chown -R _www:_www /srv/www\nsudo chmod -R g+w /srv/www\n</code></pre>\n<p>Add your user account to the _www group so you can write to <code>/srv/www</code></p>\n<pre><code>sudo dseditgroup -o edit -a `whoami` -t user _www\n</code></pre>\n<h4>Start Apache (and configure it to start automatically at startup)</h4>\n<pre><code>sudo apachectl start\n</code></pre>\n<h4>Install Drush</h4>\n<pre><code>brew install drush\n</code></pre>\n<h4>Set up a test Drupal site</h4>\n<p>Create a database in MySQL</p>\n<pre><code>cd /srv/www\ndrush dl drupal\nmv drupal-* dtest\n</code></pre>\n<p>Create a Drupal settings.php file and fill it out with your database credentials.</p>\n<p>In the site .htaccess file uncomment the directive:</p>\n<pre><code># RewriteBase /\n</code></pre>\n<p>Navigate to <a href=\"http://dtest.dev/install.php\">http://dtest.dev/install.php</a>\nOnce installed, you should also be able to enable Clean URLs.</p>\n<p>And you&apos;re done!</p>\n</div>",
    "body_text": "UPDATE: I am now of the opinion that you're probably better off installing homebrew with a prefix of somewhere inside your user directory, eg. ~/.homebrew/. I mention this below as an alternative, but now this would be my primary recommendation. Some parts, however, such as configuring the Apple-included Apache installation, and the custom DNS resolvers, are system-wide changes, so you might not want to couple them to a particular user account. Perhaps consider brew installing a user-local copy of Apache, but use a system level installation of dnsmasq.\nOriginal article text follows:\nSo you've got a fresh, clean Mountain Lion install and you need to get up and running for local development. Recently I spent a day doing just that, so I thought I'd write it all down, to save me from having to look all this stuff up again.\nInstall Xcode Command Line Tools\nAvailable from the Apple Developer downloads area. You'll need an Apple ID.\nThis package includes llvm-gcc, which is a (mostly) compatible replacement for gcc. It will work for most homebrew formulas which build with gcc.\nInstall homebrew\nhomebrew can be conveniently installed with one line in the Terminal. As with all curl-to-sh style install scripts, you should read the script first to make sure it's not going to do anything bad. Don't say I didn't warn you :)\nruby -e \"$(curl -fsSL https://raw.github.com/mxcl/homebrew/go)\"\n\nThe most convenient approach to using homebrew is to make /usr/local writable to admin group, if you don’t mind a (sort of) security risk. Bear in mind, /Applications is writable by that group by default anyway, so unless you've locked that down also, this won't really make your system much more insecure than it already is.\nsudo chmod -R g+w /usr/local\n\nUnfortunately without doing this, homebrew doesn't work particularly well in its default install location. Alternatively install somewhere user-local like ~/homebrew if you're really concerned about security and locking down user permissions on your local machine.\nInstall Node.js\nNode in particular is easier to install from the nodejs.org installer package, not homebrew. Due to some past disagreement between the maintainers of npm and homebrew, the homebrew formula for node doesn’t properly install npm. The official installer, however, works pretty well.\nTo get npm install -g working (without sudo) you may also want to change the global node_modules directory to have a group id of 'admin':\nsudo chgrp -R admin /usr/local/lib/node_modules\n\nYou may also need to give g+w permissions to that directory tree, if you installed node after running the chmod command above. This comes with the same caveats as homebrew. If you're really security conscious, install node and npm somewhere in your user directory, rather than globally in /usr.\nInstall Redis & MongoDB (optional)\nbrew install redis\nredis-server\nbrew install mongodb\nmongod\n\nInstall MySQL\nbrew install mysql\n\nThen follow the instructions depending on whether you want MySQL to run as your user account or a different one, where data should be stored and whether you want to start the daemon manually or run at login.\nEg. to set up databases to run as your user account, with data in /usr/local/var/mysql and running at login:\nunset TMPDIR\nmysql_install_db --verbose --user=`whoami` --basedir=\"$(brew --prefix mysql)\" --datadir=/usr/local/var/mysql --tmpdir=/tmp\n\nTo have launchd start mysql at login:\nln -sfv /usr/local/opt/mysql/*.plist ~/Library/LaunchAgents\n\nThen to load mysql now:\nlaunchctl load ~/Library/LaunchAgents/homebrew.mxcl.mysql.plist\n\nSet up the root mysql account. Pick a better password than I have.\n/usr/local/opt/mysql/bin/mysqladmin -u root password 123456\n\nInstall PHP 5.4 (optional)\nPHP is not in the main homebrew packages, so you'll need to 'tap' some extra repos before you can install it.\nbrew tap homebrew/dupes\nbrew tap josegonzalez/homebrew-php\n\nUpdate LoadModule directive in Apache config file to point to new PHP version\n# /etc/apache2/httpd.conf\n# Apple default:\n# LoadModule php5_module libexec/apache2/libphp5.so\n# This should be equivalent to $(brew --prefix php54)/libexec/apache2/libphp5.so\nLoadModule php5_module /usr/local/opt/php54/libexec/apache2/libphp5.so\n\nAdd updated PHP version to the PATH in .bash_profile\n# ~/.bash_profile\nexport PATH=\"$(brew --prefix php54)/bin:$PATH\"\n\nMySQL socket location & PHP PDO extension\nWhen first running a PHP application which connects to MySQL, you may run in to errors relating to the socket through which PHP's PDO extension is attempting to connect to MySQL. This is because PDO is looking for the MySQL socket at /var/mysql/mysql.sock, but it's probably at /tmp/mysql.sock instead.\nSome options you have include setting up a php.ini file:\nsudo cp /etc/php.ini.default /etc/php.ini\nsudo vi /etc/php.ini\n\nand setting pdo_mysql.default_socket=/tmp/mysql.sock therein. If you go for the php.ini approach it might also be worth setting display_errors = On while you're there.\nOr you could use a symbolic link to make PHP happy:\nsudo mkdir /var/mysql\nsudo ln -s /tmp/mysql.sock /var/mysql/mysql.sock\n\nI'm not really sure which solution is best, but both seem to do the job.\nSet up .dev TLD for local development using dnsmasq\nNo one likes having to go and edit your hosts file, or something similarly tedious, every single time they create a new local project. By setting up a special TLD and dynamic vhosts, we can avoid ever having to waste time with this stuff again.\nbrew install dnsmasq\nmkdir -pv $(brew --prefix)/etc/\n\nConfigure dnsmasq\necho 'address=/.dev/127.0.0.1' > $(brew --prefix)/etc/dnsmasq.conf\n\nCreate LaunchDaemon so dnsmasq runs at startup\nsudo cp -v $(brew --prefix dnsmasq)/homebrew.mxcl.dnsmasq.plist /Library/LaunchDaemons\nsudo launchctl load -w /Library/LaunchDaemons/homebrew.mxcl.dnsmasq.plist\n\nSet up a custom resolver to delegate resolution for .dev domains to dnsmasq\nsudo mkdir -v /etc/resolver\nsudo bash -c 'echo \"nameserver 127.0.0.1\" > /etc/resolver/dev'\n\nSet up dynamically configured mass virtual hosting in Apache\nIdeally, all you should need to do to spool up a new site for development is create a directory under /srv/www.\nThis Apache config should let you do just that.\nCreate /etc/apache2/other/mass-vhost.conf:\n<Directory /srv/www>\n  Order Deny,Allow\n  Allow from all\n  AllowOverride All\n</Directory>\n\nNameVirtualHost *:80\n<VirtualHost *:80>\n  # get the server name from the Host: header\n  UseCanonicalName Off\n  # include the server name in the filenames used to satisfy requests\n  VirtualDocumentRoot /srv/www/%1\n</VirtualHost>\n\nCreate your sites directory\nsudo mkdir -p /srv/www\nsudo chown -R _www:_www /srv/www\nsudo chmod -R g+w /srv/www\n\nAdd your user account to the _www group so you can write to /srv/www\nsudo dseditgroup -o edit -a `whoami` -t user _www\n\nStart Apache (and configure it to start automatically at startup)\nsudo apachectl start\n\nInstall Drush\nbrew install drush\n\nSet up a test Drupal site\nCreate a database in MySQL\ncd /srv/www\ndrush dl drupal\nmv drupal-* dtest\n\nCreate a Drupal settings.php file and fill it out with your database credentials.\nIn the site .htaccess file uncomment the directive:\n# RewriteBase /\n\nNavigate to http://dtest.dev/install.php\nOnce installed, you should also be able to enable Clean URLs.\nAnd you're done!\n",
    "body_preview": "<strong>UPDATE:</strong> I am now of the opinion that you&apos;re probably better off installing homebrew with a prefix of somewhere inside your user directory, eg. <code>~/.homebrew/</code>. I mention this below as an alternative, but now this would be my primary recommendation. Some parts, however, such as configuring the Apple-included Apache installation, and the custom DNS resolvers, are system-wide changes, so you might not want to couple them to a particular user account. Perhaps consider <code>brew install</code>ing a user-local copy of Apache, but use a system level installation of dnsmasq.",
    "created": "2013-03-26T22:00:01+08:00"
  },
  "4": {
    "id": "4",
    "slug": "hacker-news-theme",
    "title": " Hacker News theme ",
    "author": {
      "username": "James",
      "id": "7"
    },
    "body": "<div class=\"field-item even\" property=\"content:encoded\"><p>A while back I restyled Hacker News using the Stylebot extension for Chrome. Initially I just wanted to apply a fixed width, as the site&apos;s fluid layout can result in some very long lines on a large/wide display.</p>\n<p>Over time I added in some other usability improvements, such as:</p>\n<ul>\n<li>larger &apos;vote&apos; buttons with more space in between them, which helps to avoid mis-clicks on the downvote arrow (a common complaint on HN)</li>\n<li>stronger delineation between unread and read articles, using a faint cyan highlight on those which are unread, while read articles almost fade into the background</li>\n<li>monospace fonts optimised for code</li>\n</ul>\n<p>Works best with Helvetica Neue and Menlo installed (as they are by default on Mac OS). Alternatively, Anonymous Pro will be used for code if installed.</p>\n<p>Vote arrows use the <a href=\"http://css-tricks.com/snippets/css/css-triangle/\">CSS border based triangle</a> technique.</p>\n<p>If you want to use the theme yourself you can grab it from <a href=\"http://stylebot.me/styles/248\">Stylebot Social</a>.</p>\n</div>",
    "body_text": "A while back I restyled Hacker News using the Stylebot extension for Chrome. Initially I just wanted to apply a fixed width, as the site's fluid layout can result in some very long lines on a large/wide display.\nOver time I added in some other usability improvements, such as:\n\nlarger 'vote' buttons with more space in between them, which helps to avoid mis-clicks on the downvote arrow (a common complaint on HN)\nstronger delineation between unread and read articles, using a faint cyan highlight on those which are unread, while read articles almost fade into the background\nmonospace fonts optimised for code\n\nWorks best with Helvetica Neue and Menlo installed (as they are by default on Mac OS). Alternatively, Anonymous Pro will be used for code if installed.\nVote arrows use the CSS border based triangle technique.\nIf you want to use the theme yourself you can grab it from Stylebot Social.\n",
    "body_preview": "A while back I restyled Hacker News using the Stylebot extension for Chrome. Initially I just wanted to apply a fixed width, as the site&apos;s fluid layout can result in some very long lines on a large/wide display.",
    "created": "2013-05-25T12:38:35+08:00"
  },
  "5": {
    "id": "5",
    "slug": "caniusecom-mirror",
    "title": " Caniuse.com Mirror ",
    "author": {
      "username": "James",
      "id": "7"
    },
    "body": "<div class=\"field-item even\" property=\"content:encoded\"><p><strong>UPDATE: original site is back online, I took down the mirror</strong></p>\n<p>I rely on <a href=\"http://caniuse.com\">caniuse.com</a> to look up browser compatibility of various new features in CSS, JS, SVG etc. I noticed the other day that seems to be down (possibly pending a re-launch). Considering it&apos;s such a useful resource I decided to extract it from Google&apos;s cache and throw up a mirror.</p>\n<p>You can find it at <a href=\"http://caniuse.jsdf.co\">caniuse.jsdf.co</a>.</p>\n</div>",
    "body_text": "UPDATE: original site is back online, I took down the mirror\nI rely on caniuse.com to look up browser compatibility of various new features in CSS, JS, SVG etc. I noticed the other day that seems to be down (possibly pending a re-launch). Considering it's such a useful resource I decided to extract it from Google's cache and throw up a mirror.\nYou can find it at caniuse.jsdf.co.\n",
    "body_preview": "<strong>UPDATE: original site is back online, I took down the mirror</strong>",
    "created": "2013-07-12T19:30:13+08:00"
  },
  "6": {
    "id": "6",
    "slug": "installing-pygame-python-mac-os-108-mountain-lion",
    "title": " Installing Pygame on Mac OS 10.8 Mountain Lion ",
    "author": {
      "username": "James",
      "id": "7"
    },
    "body": "<div class=\"field-item even\" property=\"content:encoded\"><p>I decided to install and play around with Pygame today, mainly as an excuse to write some Python for a minor departure from all the Javascript/Coffeescript I&apos;ve been writing lately. Unfortunately the process wasn&apos;t entirely frictionless, due to Pygame not yet accounting for Apple&apos;s move to XQuartz as the recommended X11 implementation for Mac OS as of 10.8 Mountain Lion. As a result I ran into some compilation errors while Pygame was building it&apos;s native extensions, which fortunately were not too hard to fix as I had some familiarity with changes to X11 on Mountain Lion.</p>\n<p><strong>TL;DR</strong> <a href=\"https://jamesfriend.com.au/installing-pygame-python-mac-os-108-mountain-lion#node_6_tldr\">you need to set some environment variables before installing Pygame</a></p>\n<h3>What didn&apos;t work</h3>\n<p>Running <code>pip install pygame</code> would fail as follows:</p>\n<pre><code class=\"language-nohighlight\">building &apos;pygame.display&apos; extension\ncc -fno-strict-aliasing -fno-common -dynamic -I/usr/local/include -DNDEBUG -g -O3 -Wall -Wstrict-prototypes -Ddarwin -I/Library/Frameworks/SDL.framework/Versions/Current/Headers -I/usr/local/Cellar/python/2.7.3/Frameworks/Python.framework/Versions/2.7/include/python2.7 -c src/display.c -o build/temp.macosx-10.8-x86_64-2.7/src/display.o\nIn file included from src/display.c:30:\n/Library/Frameworks/SDL.framework/Versions/Current/Headers/SDL_syswm.h:58:10: fatal error: &apos;X11/Xlib.h&apos; file not found\n#include &lt;X11/Xlib.h&gt;\n             ^\n1 error generated.\nerror: command &apos;cc&apos; failed with exit status 1\n</code></pre>\n<p>While building the native extention &apos;pygame.display&apos;, Xlib.h (a particular X11 header, required by SDL) is not found, as XQuartz&apos;s <code>/opt/X11/include</code> directory has not been specified to search for headers.</p>\n<p>By setting some environment variables, we can configure the Pygame build process to build correctly. I found these in a few other blog posts, but they specified only <code>-arch i386</code> for CFLAGS, LDFLAGS and ARCHFLAGS, which allowed the build process to complete, but <code>import pygame</code> fails (when running 64bit Python):</p>\n<pre><code>&gt;&gt;&gt; import pygame\nTraceback (most recent call last):\n  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;\n  File &quot;/usr/local/lib/python2.7/site-packages/pygame/__init__.py&quot;, line 95, in &lt;module&gt;\n    from pygame.base import *\nImportError: dlopen(/usr/local/lib/python2.7/site-packages/pygame/base.so, 2): no suitable image found.  Did find:\n/usr/local/lib/python2.7/site-packages/pygame/base.so: mach-o, but wrong architecture\n</code></pre>\n<h3><a id=\"node_6_tldr\"></a>What actually got Pygame working</h3>\n<p>The environment variables (gcc flags) required to allow Pygame to correctly build fat binaries (for both 32bit and 64bit Python) are:</p>\n<pre><code>export CC=&apos;/usr/bin/gcc&apos;\nexport CFLAGS=&apos;-isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.8.sdk -I/opt/X11/include -arch i386 -arch x86_64&apos;\nexport LDFLAGS=&apos;-arch i386 -arch x86_64&apos;\nexport ARCHFLAGS=&apos;-arch i386 -arch x86_64&apos;\n</code></pre>\n<p>Then <code>pip install pygame</code> and <code>python -c &apos;import pygame&apos;</code>. If no error is returned by Python, then you should now have a working installation of Pygame.</p>\n<h3>Additional details</h3>\n<p>I&apos;m using homebrew-installed Python/pip, and I&apos;ve set my $PATH with <code>/usr/local/bin</code> before the system-installed Python.</p>\n<p>If you haven&apos;t installed Python/pip via homebrew (you&apos;re using the system-installed Python), you would likely need to run <code>sudo pip install pygame</code>.</p>\n<p>If you&apos;re using another install method, such as easy_install, this fix should still work.</p>\n<p>Before running <code>pip install pygame</code>, I had also installed <a href=\"https://developer.apple.com/downloads/index.action\">Command Line Tools for XCode</a> (<a href=\"http://docwiki.embarcadero.com/RADStudio/XE4/en/Installing_the_Xcode_Command_Line_Tools_on_a_Mac\">walkthrough</a>), as well as <a href=\"http://xquartz.macosforge.org/landing/\">XQuartz</a>, and the following homebrew packages:\n<code>brew install sdl sdl_image sdl_mixer sdl_ttf smpeg portmidi</code>.</p>\n<p>If homebrew fails to install <code>smpeg</code> you might need to do the following:</p>\n<pre><code class=\"language-bash\">brew tap homebrew/headonly\nbrew install --HEAD smpeg\n</code></pre>\n</div>",
    "body_text": "I decided to install and play around with Pygame today, mainly as an excuse to write some Python for a minor departure from all the Javascript/Coffeescript I've been writing lately. Unfortunately the process wasn't entirely frictionless, due to Pygame not yet accounting for Apple's move to XQuartz as the recommended X11 implementation for Mac OS as of 10.8 Mountain Lion. As a result I ran into some compilation errors while Pygame was building it's native extensions, which fortunately were not too hard to fix as I had some familiarity with changes to X11 on Mountain Lion.\nTL;DR you need to set some environment variables before installing Pygame\nWhat didn't work\nRunning pip install pygame would fail as follows:\nbuilding 'pygame.display' extension\ncc -fno-strict-aliasing -fno-common -dynamic -I/usr/local/include -DNDEBUG -g -O3 -Wall -Wstrict-prototypes -Ddarwin -I/Library/Frameworks/SDL.framework/Versions/Current/Headers -I/usr/local/Cellar/python/2.7.3/Frameworks/Python.framework/Versions/2.7/include/python2.7 -c src/display.c -o build/temp.macosx-10.8-x86_64-2.7/src/display.o\nIn file included from src/display.c:30:\n/Library/Frameworks/SDL.framework/Versions/Current/Headers/SDL_syswm.h:58:10: fatal error: 'X11/Xlib.h' file not found\n#include <X11/Xlib.h>\n             ^\n1 error generated.\nerror: command 'cc' failed with exit status 1\n\nWhile building the native extention 'pygame.display', Xlib.h (a particular X11 header, required by SDL) is not found, as XQuartz's /opt/X11/include directory has not been specified to search for headers.\nBy setting some environment variables, we can configure the Pygame build process to build correctly. I found these in a few other blog posts, but they specified only -arch i386 for CFLAGS, LDFLAGS and ARCHFLAGS, which allowed the build process to complete, but import pygame fails (when running 64bit Python):\n>>> import pygame\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/usr/local/lib/python2.7/site-packages/pygame/__init__.py\", line 95, in <module>\n    from pygame.base import *\nImportError: dlopen(/usr/local/lib/python2.7/site-packages/pygame/base.so, 2): no suitable image found.  Did find:\n/usr/local/lib/python2.7/site-packages/pygame/base.so: mach-o, but wrong architecture\n\nWhat actually got Pygame working\nThe environment variables (gcc flags) required to allow Pygame to correctly build fat binaries (for both 32bit and 64bit Python) are:\nexport CC='/usr/bin/gcc'\nexport CFLAGS='-isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.8.sdk -I/opt/X11/include -arch i386 -arch x86_64'\nexport LDFLAGS='-arch i386 -arch x86_64'\nexport ARCHFLAGS='-arch i386 -arch x86_64'\n\nThen pip install pygame and python -c 'import pygame'. If no error is returned by Python, then you should now have a working installation of Pygame.\nAdditional details\nI'm using homebrew-installed Python/pip, and I've set my $PATH with /usr/local/bin before the system-installed Python.\nIf you haven't installed Python/pip via homebrew (you're using the system-installed Python), you would likely need to run sudo pip install pygame.\nIf you're using another install method, such as easy_install, this fix should still work.\nBefore running pip install pygame, I had also installed Command Line Tools for XCode (walkthrough), as well as XQuartz, and the following homebrew packages:\nbrew install sdl sdl_image sdl_mixer sdl_ttf smpeg portmidi.\nIf homebrew fails to install smpeg you might need to do the following:\nbrew tap homebrew/headonly\nbrew install --HEAD smpeg\n\n",
    "body_preview": "I decided to install and play around with Pygame today, mainly as an excuse to write some Python for a minor departure from all the Javascript/Coffeescript I&apos;ve been writing lately. Unfortunately the process wasn&apos;t entirely frictionless, due to Pygame not yet accounting for Apple&apos;s move to XQuartz as the recommended X11 implementation for Mac OS as of 10.8 Mountain Lion. As a result I ran into some compilation errors while Pygame was building it&apos;s native extensions, which fortunately were not too hard to fix as I had some familiarity with changes to X11 on Mountain Lion.",
    "created": "2013-08-07T16:34:15+08:00"
  },
  "7": {
    "id": "7",
    "slug": "working-implementation-sdlcreatergbsurfacefrom-emscripten",
    "title": " Working implementation of SDL_CreateRGBSurfaceFrom for Emscripten ",
    "author": {
      "username": "James",
      "id": "7"
    },
    "body": "<div class=\"field-item even\" property=\"content:encoded\"><p><a href=\"https://github.com/kripken/emscripten\">Emscripten</a> is an awesome tool for porting existing native codebases to the browser. There are a bunch of cool projects using it to port graphical applications such as games and emulators, especially those which already use the <a href=\"http://www.libsdl.org/\">SDL library</a> as a cross-platform video, sound and I/O abstraction. Leveraging the fact that the SDL abstractions provide portability across different OS platforms means that by implementing of parts of SDL in Javascript and compiling the code via Emscripten, the browser can become (with some caveats) another SDL target platform. However, Emscripten&apos;s SDL &apos;shims&apos; are still very much a work in progress, and in a current project of my own (porting a classic Mac OS emulator), I&apos;ve run into some parts where I&apos;ve had to fill in the gaps myself.</p>\n<p>Specifically, if you&apos;re finding your SDL-based, Emscripten compiled app is failing to render to the canvas, the issue may be that the app is trying to use the incomplete <code>SDL_CreateRGBSurfaceFrom</code> method to create an SDL surface from a buffer of pixels.</p>\n<p>The following log message appearing in the Javascript console is a possible giveaway:</p>\n<pre><code class=\"language-javascript\">TODO: Partially unimplemented SDL_CreateRGBSurfaceFrom called!\n</code></pre>\n<p>I&apos;ve written a basic implementation of this method which you can add to Emscripten&apos;s <code>library_sdl.js</code>, to be included in your compiled app. It should work when supplied with a 24-bit colour pixel buffer (or 32-bit with alpha) provided the channels are in RGB (or RGBA) order.</p>\n<pre><code class=\"language-javascript\">SDL_CreateRGBSurfaceFrom: function(pixels, width, height, depth, pitch, rmask, gmask, bmask, amask) {\n  // TODO: Take into account depth and pitch parameters.\n\n  var surface = SDL.makeSurface(width, height, 0, false, &apos;CreateRGBSurfaceFrom&apos;, rmask, gmask, bmask, amask);\n\n  var surfaceData = SDL.surfaces[surface];\n  var surfaceImageData = surfaceData.ctx.getImageData(0, 0, width, height);\n  var surfacePixelData = surfaceImageData.data;\n\n  // Fill pixel data to created surface.\n  // Supports SDL_PIXELFORMAT_RGBA8888 and SDL_PIXELFORMAT_RGB888\n  var channels = amask ? 4 : 3; // RGBA8888 or RGB888\n  for (var pixelOffset = 0; pixelOffset &lt; width*height; pixelOffset++) {\n    surfacePixelData[pixelOffset*4+0] = HEAPU8[pixels + (pixelOffset*channels+0)]; // R\n    surfacePixelData[pixelOffset*4+1] = HEAPU8[pixels + (pixelOffset*channels+1)]; // G\n    surfacePixelData[pixelOffset*4+2] = HEAPU8[pixels + (pixelOffset*channels+2)]; // B\n    surfacePixelData[pixelOffset*4+3] = amask ? HEAPU8[pixels + (pixelOffset*channels+3)] : 0xff; // A\n  };\n  \n  surfaceData.ctx.putImageData(surfaceImageData, 0, 0);\n\n  return surface;\n},\n</code></pre>\n<p>You can paste in the above function to replace the existing partial implementation in the <code>src/library_sdl.js</code> file under wherever you&apos;ve installed Emscripten.</p>\n<p>I chose to support those specific pixel formats because <code>SDL_PIXELFORMAT_RGBA8888</code> is the one which Emscripten currently sets on all surfaces, and <code>SDL_PIXELFORMAT_RGB888</code> seems like a common choice also (as not all apps are likely to use an alpha channel). It&apos;s also the format which was necessary for the application I&apos;m working on.</p>\n</div>",
    "body_text": "Emscripten is an awesome tool for porting existing native codebases to the browser. There are a bunch of cool projects using it to port graphical applications such as games and emulators, especially those which already use the SDL library as a cross-platform video, sound and I/O abstraction. Leveraging the fact that the SDL abstractions provide portability across different OS platforms means that by implementing of parts of SDL in Javascript and compiling the code via Emscripten, the browser can become (with some caveats) another SDL target platform. However, Emscripten's SDL 'shims' are still very much a work in progress, and in a current project of my own (porting a classic Mac OS emulator), I've run into some parts where I've had to fill in the gaps myself.\nSpecifically, if you're finding your SDL-based, Emscripten compiled app is failing to render to the canvas, the issue may be that the app is trying to use the incomplete SDL_CreateRGBSurfaceFrom method to create an SDL surface from a buffer of pixels.\nThe following log message appearing in the Javascript console is a possible giveaway:\nTODO: Partially unimplemented SDL_CreateRGBSurfaceFrom called!\n\nI've written a basic implementation of this method which you can add to Emscripten's library_sdl.js, to be included in your compiled app. It should work when supplied with a 24-bit colour pixel buffer (or 32-bit with alpha) provided the channels are in RGB (or RGBA) order.\nSDL_CreateRGBSurfaceFrom: function(pixels, width, height, depth, pitch, rmask, gmask, bmask, amask) {\n  // TODO: Take into account depth and pitch parameters.\n\n  var surface = SDL.makeSurface(width, height, 0, false, 'CreateRGBSurfaceFrom', rmask, gmask, bmask, amask);\n\n  var surfaceData = SDL.surfaces[surface];\n  var surfaceImageData = surfaceData.ctx.getImageData(0, 0, width, height);\n  var surfacePixelData = surfaceImageData.data;\n\n  // Fill pixel data to created surface.\n  // Supports SDL_PIXELFORMAT_RGBA8888 and SDL_PIXELFORMAT_RGB888\n  var channels = amask ? 4 : 3; // RGBA8888 or RGB888\n  for (var pixelOffset = 0; pixelOffset < width*height; pixelOffset++) {\n    surfacePixelData[pixelOffset*4+0] = HEAPU8[pixels + (pixelOffset*channels+0)]; // R\n    surfacePixelData[pixelOffset*4+1] = HEAPU8[pixels + (pixelOffset*channels+1)]; // G\n    surfacePixelData[pixelOffset*4+2] = HEAPU8[pixels + (pixelOffset*channels+2)]; // B\n    surfacePixelData[pixelOffset*4+3] = amask ? HEAPU8[pixels + (pixelOffset*channels+3)] : 0xff; // A\n  };\n  \n  surfaceData.ctx.putImageData(surfaceImageData, 0, 0);\n\n  return surface;\n},\n\nYou can paste in the above function to replace the existing partial implementation in the src/library_sdl.js file under wherever you've installed Emscripten.\nI chose to support those specific pixel formats because SDL_PIXELFORMAT_RGBA8888 is the one which Emscripten currently sets on all surfaces, and SDL_PIXELFORMAT_RGB888 seems like a common choice also (as not all apps are likely to use an alpha channel). It's also the format which was necessary for the application I'm working on.\n",
    "body_preview": "<a href=\"https://github.com/kripken/emscripten\">Emscripten</a> is an awesome tool for porting existing native codebases to the browser. There are a bunch of cool projects using it to port graphical applications such as games and emulators, especially those which already use the <a href=\"http://www.libsdl.org/\">SDL library</a> as a cross-platform video, sound and I/O abstraction. Leveraging the fact that the SDL abstractions provide portability across different OS platforms means that by implementing of parts of SDL in Javascript and compiling the code via Emscripten, the browser can become (with some caveats) another SDL target platform. However, Emscripten&apos;s SDL &apos;shims&apos; are still very much a work in progress, and in a current project of my own (porting a classic Mac OS emulator), I&apos;ve run into some parts where I&apos;ve had to fill in the gaps myself.",
    "created": "2013-08-13T18:55:44+08:00"
  },
  "8": {
    "id": "8",
    "slug": "pcejs-classic-mac-os-browser",
    "title": " PCE.js - Classic Mac OS in the browser ",
    "author": {
      "username": "James",
      "id": "7"
    },
    "body": "<div class=\"field-item even\" property=\"content:encoded\"><p>I&apos;ve just completed porting Hampa Hug&apos;s excellent <a href=\"http://www.hampa.ch/pce/\">PCE</a> emulator to run in the browser, using Emscripten. I&apos;ve mainly focused on the pce-macplus build. This is pretty awesome because it means you can run classic Mac OS in the browser. Check it out: <a href=\"/pce-js/\">PCE.js - Classic Mac OS in the browser</a>.</p>\n<p>I&apos;ve also got the pce-ibmpc build working (emulating an IBM compatible, up to a 286 CPU), and and pce-atarist, an Atari ST emulator also, with browser demos coming soon for each.</p>\n<p>A dump of the source is available <a href=\"/pce-js/pcejs20131028.zip\">here</a> but I&apos;ll try to clean it up and make it available on GitHub when I get the chance.</p>\n<p><strong>Update: source on <a href=\"https://github.com/jsdf/pce\">GitHub</a>, and I&apos;ve added an <a href=\"/pce-js/ibmpc-games/\">IBM PC Demo</a>.</strong></p>\n</div>",
    "body_text": "I've just completed porting Hampa Hug's excellent PCE emulator to run in the browser, using Emscripten. I've mainly focused on the pce-macplus build. This is pretty awesome because it means you can run classic Mac OS in the browser. Check it out: PCE.js - Classic Mac OS in the browser.\nI've also got the pce-ibmpc build working (emulating an IBM compatible, up to a 286 CPU), and and pce-atarist, an Atari ST emulator also, with browser demos coming soon for each.\nA dump of the source is available here but I'll try to clean it up and make it available on GitHub when I get the chance.\nUpdate: source on GitHub, and I've added an IBM PC Demo.\n",
    "body_preview": "I&apos;ve just completed porting Hampa Hug&apos;s excellent <a href=\"http://www.hampa.ch/pce/\">PCE</a> emulator to run in the browser, using Emscripten. I&apos;ve mainly focused on the pce-macplus build. This is pretty awesome because it means you can run classic Mac OS in the browser. Check it out: <a href=\"/pce-js/\">PCE.js - Classic Mac OS in the browser</a>.",
    "created": "2013-09-20T12:56:44+08:00"
  },
  "9": {
    "id": "9",
    "slug": "why-port-emulators-browser",
    "title": " Why port emulators to the browser? ",
    "author": {
      "username": "James",
      "id": "7"
    },
    "body": "<div class=\"field-item even\" property=\"content:encoded\"><p>In a discussion on Hacker News about emulators being ported to the browser, I drew attention to my own project, <a href=\"/pce-js/\">PCE.js</a>, which emulates a <a href=\"http://en.wikipedia.org/wiki/Macintosh_Plus\">Macintosh Plus</a> and an <a href=\"http://en.wikipedia.org/wiki/IBM_Personal_Computer_XT\">IBM PC/XT</a>. Some of the questions brought up included why someone would undertake such a project, and also the legal considerations of including the software ROM required to boot the machine.</p>\n<p>So, why port emulators of outdated computers to the browser? Well, to start with, I feel very strongly about the importance of learning from the past &#x2013; not making the same mistakes again and again due to a lack of historical perspective. I was really inspired by <a href=\"http://worrydream.com/dbx/\">Bret Victor&apos;s talk</a> at the DBX conference, in which Bret demonstrated a bunch of technologies from the 1970s which attempted to solve problems that we&apos;re still wrestling with today. It&apos;s a great talk, and it precipitates the question; why haven&apos;t we figured this stuff out yet? Why do today&apos;s &apos;solutions&apos; feel lame in comparison to these prototypes from several decades ago? If anything, it seems like we&apos;ve gone backwards. The great past ideas Bret mentions, like Sketchpad, NLS, and Smalltalk, should inspire us to aim higher as we create the future.</p>\n<p>Similarly, lots of great thinking and design can be found in old systems. The original Macintosh, with influence from the <a href=\"http://en.wikipedia.org/wiki/Xerox_Alto\">Xerox Alto</a>, solved lots of user interface issues which people are still failing to think about today. A trivial example is that Mac OS, in 1984, had considered &#x2018;<a href=\"http://thomaspark.me/2011/10/making-menus-escapable/\">angle of escape</a>&#x2019; in its drop down menus. That is to say, menus don&#x2019;t close when the mouse cuts a corner on the way to a submenu. It seems minor, but it&#x2019;s something which Windows didn&#x2019;t fix until 2001 (Windows XP), and plenty of web apps still do wrong to this day. The awesome usability and simplicity of the original Mac is something which should be available as a working, interactive demo to the newest generation of designers, makers and creators.</p>\n<p>I also feel that the historical significance of these systems means they should be available to explore with a minimal barrier to entry. Making that happen, though, requires including the system ROM, OS and other software such as applications and games, along with the demo, which goes beyond what&#x2019;s covered by &#x2018;fair use&#x2019; in copyright terms. However I&#x2019;d go as far as to say that making this stuff accessible has, to a degree, a moral imperative, and that it outweighs the negative of the technical infringement on copyright. Such software is, after all, &#x2018;abandonware&apos;; it hasn&#x2019;t been sold commercially for a long time, and it&#x2019;s also just really outdated, not likely to be used to any financial gain.</p>\n<p>Being able to explore and interact with these once-pioneering systems, the Macintosh and the IBM PC, has great historical and educational potential, and that&#x2019;s why I wanted to make them available in the most accessible way possible; in the browser, without any extra searching, downloading, installing. Batteries included, no assembly required.</p>\n</div>",
    "body_text": "In a discussion on Hacker News about emulators being ported to the browser, I drew attention to my own project, PCE.js, which emulates a Macintosh Plus and an IBM PC/XT. Some of the questions brought up included why someone would undertake such a project, and also the legal considerations of including the software ROM required to boot the machine.\nSo, why port emulators of outdated computers to the browser? Well, to start with, I feel very strongly about the importance of learning from the past – not making the same mistakes again and again due to a lack of historical perspective. I was really inspired by Bret Victor's talk at the DBX conference, in which Bret demonstrated a bunch of technologies from the 1970s which attempted to solve problems that we're still wrestling with today. It's a great talk, and it precipitates the question; why haven't we figured this stuff out yet? Why do today's 'solutions' feel lame in comparison to these prototypes from several decades ago? If anything, it seems like we've gone backwards. The great past ideas Bret mentions, like Sketchpad, NLS, and Smalltalk, should inspire us to aim higher as we create the future.\nSimilarly, lots of great thinking and design can be found in old systems. The original Macintosh, with influence from the Xerox Alto, solved lots of user interface issues which people are still failing to think about today. A trivial example is that Mac OS, in 1984, had considered ‘angle of escape’ in its drop down menus. That is to say, menus don’t close when the mouse cuts a corner on the way to a submenu. It seems minor, but it’s something which Windows didn’t fix until 2001 (Windows XP), and plenty of web apps still do wrong to this day. The awesome usability and simplicity of the original Mac is something which should be available as a working, interactive demo to the newest generation of designers, makers and creators.\nI also feel that the historical significance of these systems means they should be available to explore with a minimal barrier to entry. Making that happen, though, requires including the system ROM, OS and other software such as applications and games, along with the demo, which goes beyond what’s covered by ‘fair use’ in copyright terms. However I’d go as far as to say that making this stuff accessible has, to a degree, a moral imperative, and that it outweighs the negative of the technical infringement on copyright. Such software is, after all, ‘abandonware'; it hasn’t been sold commercially for a long time, and it’s also just really outdated, not likely to be used to any financial gain.\nBeing able to explore and interact with these once-pioneering systems, the Macintosh and the IBM PC, has great historical and educational potential, and that’s why I wanted to make them available in the most accessible way possible; in the browser, without any extra searching, downloading, installing. Batteries included, no assembly required.\n",
    "body_preview": "In a discussion on Hacker News about emulators being ported to the browser, I drew attention to my own project, <a href=\"/pce-js/\">PCE.js</a>, which emulates a <a href=\"http://en.wikipedia.org/wiki/Macintosh_Plus\">Macintosh Plus</a> and an <a href=\"http://en.wikipedia.org/wiki/IBM_Personal_Computer_XT\">IBM PC/XT</a>. Some of the questions brought up included why someone would undertake such a project, and also the legal considerations of including the software ROM required to boot the machine.",
    "created": "2013-10-18T14:42:40+08:00"
  },
  "11": {
    "id": "11",
    "slug": "running-hypercard-stack-2014",
    "title": " Running a Hypercard stack on a modern Mac ",
    "author": {
      "username": "James",
      "id": "7"
    },
    "body": "<div class=\"field-item even\" property=\"content:encoded\"><p><strong>Updated: now works on Yosemite</strong></p>\n<p>A bunch of people have emailed me about getting Hypercard stacks running under emulation.\nHere is a pretty easy guide to running a Hypercard stack on a recent Mac (eg. running Mavericks, Mountain Lion, etc):</p>\n<p>Place the Hypercard stack you want to access somewhere within your user folder: eg. Documents, or Desktop.</p>\n<p>Download <a href=\"/hypercard/hypercard-ca520e219.sheepvm.zip\">this zip file</a> [95mb] containing the <a href=\"http://sheepshaver.cebix.net/\">SheepShaver</a> classic Mac emulator bundled with Mac OS 9 and Hypercard.</p>\n<p>Extract and open <code>hypercard.sheepvm</code>. This should boot Mac OS 9.</p>\n<p>On the Mac OS 9 desktop there should be a disk called &quot;Unix&quot;. This is a virtual disk which actually lets you access files on your computer (eg. outside the emulator). Opening it is equivalent to opening your OS X <code>/Users/</code> directory.</p>\n<p>From there, navigate to your user folder (eg. your OS X username) and then to the folder you placed your Hypercard stack (in the first step).</p>\n<p>Copy your Hypercard stack from the &apos;Unix&apos; disk to somewhere on the OS 9 &apos;Macintosh HD&apos; disk.</p>\n<p>Double-click the Hypercard stack in the location you placed it on the OS 9 &apos;Macintosh HD&apos; disk (or open it from within Hypercard).</p>\n</div>",
    "body_text": "Updated: now works on Yosemite\nA bunch of people have emailed me about getting Hypercard stacks running under emulation.\nHere is a pretty easy guide to running a Hypercard stack on a recent Mac (eg. running Mavericks, Mountain Lion, etc):\nPlace the Hypercard stack you want to access somewhere within your user folder: eg. Documents, or Desktop.\nDownload this zip file [95mb] containing the SheepShaver classic Mac emulator bundled with Mac OS 9 and Hypercard.\nExtract and open hypercard.sheepvm. This should boot Mac OS 9.\nOn the Mac OS 9 desktop there should be a disk called \"Unix\". This is a virtual disk which actually lets you access files on your computer (eg. outside the emulator). Opening it is equivalent to opening your OS X /Users/ directory.\nFrom there, navigate to your user folder (eg. your OS X username) and then to the folder you placed your Hypercard stack (in the first step).\nCopy your Hypercard stack from the 'Unix' disk to somewhere on the OS 9 'Macintosh HD' disk.\nDouble-click the Hypercard stack in the location you placed it on the OS 9 'Macintosh HD' disk (or open it from within Hypercard).\n",
    "body_preview": "<strong>Updated: now works on Yosemite</strong>",
    "created": "2014-02-06T22:32:17+08:00"
  },
  "13": {
    "id": "13",
    "slug": "installing-pygame-python-3-mac-os-yosemite",
    "title": " Installing Pygame for Python 3 on Mac OS Yosemite ",
    "author": {
      "username": "superuser",
      "id": "superuser"
    },
    "body": "<div class=\"field-item even\" property=\"content:encoded\"><p>It&apos;s somewhat difficult to find instructions on how to successfully install Pygame for Python 3 on Yosemite. The front page of the Pygame website has a link which appears to point to installation instructions, but it is broken.</p>\n<p>Fortunately, someone posted <a href=\"http://pygame.org/wiki/macintosh\">these instructions</a> on the Pygame wiki:</p>\n<p>Firstly, ensure you have the Apple Xcode command line tools installed:</p>\n<pre><code class=\"language-bash\">xcode-select --install\n</code></pre>\n<p>Install XQuartz from <a href=\"http://xquartz.macosforge.org/landing/\">http://xquartz.macosforge.org/landing/</a>.\nRestart your computer so the newly installed XQuartz is used.</p>\n<p>Make sure you have <a href=\"http://brew.sh/\">homebrew</a> installed:</p>\n<pre><code class=\"language-bash\">ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;\n</code></pre>\n<p>Ensure the homebrew-installed binaries take precedence over system binaries in your <code>$PATH</code></p>\n<pre><code class=\"language-bash\"># in ~/.bash_profile\n# Homebrew binaries now take precedence over Apple defaults\nexport PATH=/usr/local/bin:$PATH\n</code></pre>\n<p>Use homebrew to install Python3 and Pygame dependencies, as well as Mercurial (<code>hg</code>), which we need to install Pygame from Bitbucket:</p>\n<pre><code class=\"language-bash\">brew install python3 hg sdl sdl_image sdl_mixer sdl_ttf portmidi\n</code></pre>\n<p>Install Pygame from Bitbucket:</p>\n<pre><code class=\"language-bash\">pip3 install hg+https://bitbucket.org/pygame/pygame\n</code></pre>\n</div>",
    "body_text": "It's somewhat difficult to find instructions on how to successfully install Pygame for Python 3 on Yosemite. The front page of the Pygame website has a link which appears to point to installation instructions, but it is broken.\nFortunately, someone posted these instructions on the Pygame wiki:\nFirstly, ensure you have the Apple Xcode command line tools installed:\nxcode-select --install\n\nInstall XQuartz from http://xquartz.macosforge.org/landing/.\nRestart your computer so the newly installed XQuartz is used.\nMake sure you have homebrew installed:\nruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n\nEnsure the homebrew-installed binaries take precedence over system binaries in your $PATH\n# in ~/.bash_profile\n# Homebrew binaries now take precedence over Apple defaults\nexport PATH=/usr/local/bin:$PATH\n\nUse homebrew to install Python3 and Pygame dependencies, as well as Mercurial (hg), which we need to install Pygame from Bitbucket:\nbrew install python3 hg sdl sdl_image sdl_mixer sdl_ttf portmidi\n\nInstall Pygame from Bitbucket:\npip3 install hg+https://bitbucket.org/pygame/pygame\n\n",
    "body_preview": "It&apos;s somewhat difficult to find instructions on how to successfully install Pygame for Python 3 on Yosemite. The front page of the Pygame website has a link which appears to point to installation instructions, but it is broken.",
    "created": "2014-12-20T13:36:59+08:00"
  },
  "14": {
    "id": "14",
    "slug": "better-assertions-shallow-rendered-react-components",
    "title": " Better assertions for shallow-rendered React components ",
    "author": {
      "username": "James",
      "id": "7"
    },
    "body": "<div class=\"field-item even\" property=\"content:encoded\"><p>The React TestUtils <a href=\"https://facebook.github.io/react/docs/test-utils.html#shallow-rendering\">shallow rendering</a> feature allows us to test React components in true isolation from other component classes, and removes the need for a DOM in the test environment. It does this by allowing us to test the return value of a component&apos;s <code>render</code> method, without\ninstantiating any subcomponents.</p>\n<p>A basic example of how it can be used, assuming we&apos;re testing a component called <code>&lt;Page /&gt;</code>:</p>\n<pre><code class=\"language-jsx\">import React from &apos;react/addons&apos;;\n\nconst headingElement = &lt;h1 className=&quot;title&quot;&gt;title text&lt;/h1&gt;;\n\n// shallow render the component under test\nconst renderer = React.addons.TestUtils.createRenderer();\nrenderer.render(&lt;Page heading={headingElement} /&gt;);\nconst renderedTree = renderer.getRenderedOutput();\n\n// make assertions about the shallow rendered tree\nassert(renderedTree.type === &apos;div&apos;);\nassert(renderedTree.props.className === &apos;page&apos;);\nassert(renderedTree.props.children[0] === headingElement);\n</code></pre>\n<p>If we&apos;re testing a stateless component, we can use a helper function to simplify things a bit, as the rendered output will always be the same given the same props:</p>\n<pre><code class=\"language-jsx\">import React from &apos;react&apos;;\nimport shallowRender from &apos;react-shallow-render&apos;;\n\nconst headingElement = &lt;h1 className=&quot;title&quot;&gt;title text&lt;/h1&gt;;\n\n// shallow render the component under test\nconst renderedTree = shallowRender(&lt;Page heading={headingElement} /&gt;);\n\n// and then do your assertions as before\n</code></pre>\n<p>However, if we are asserting directly on the root <code>ReactElement</code> returned by the renderer (or a specific child or descendant of it), then we&apos;re coupling our test to the exact structure of the tree returned by the component&apos;s render method. This means that the test will break even if we change something superficial, like wrapping the rendered child in a <code>&lt;div&gt;</code>.</p>\n<p>Instead, we can query the rendered tree to find the nodes we&apos;re interested in:</p>\n<pre><code class=\"language-jsx\">import { findWithClass } from &apos;react-shallow-testutils&apos;;\n\nconst pageContentElement = findWithClass(renderedTree, &apos;page-content&apos;);\nassert(pageContentElement != null);\n</code></pre>\n<p>You can use a utility like the <code>findAll</code> function provided by the <a href=\"https://www.npmjs.com/package/react-shallow-testutils\">react-shallow-testutils</a> npm package to traverse the rendered tree returned by <code>shallowRender</code>, finding all nodes which match a function. On top of that a number of useful finder utilities can be built, such as <code>findWithClass</code> shown in the example above (also included in the react-shallow-testutils package). <code>findWithClass</code>, as you might guess, is used to find an node with a <code>className</code> prop which includes the specified class.</p>\n<p>You can draw a parallel between the finder functions which the React <a href=\"https://facebook.github.io/react/docs/test-utils.html\">TestUtils</a> provide for finding <code>ReactComponent</code> instances in the rendered component tree and these utilties which allow finding <code>ReactElement</code> objects in the rendered element tree for a component. If you&apos;re still unclear on the difference between React components and elements, see <a href=\"https://facebook.github.io/react/docs/glossary.html\">React (Virtual) DOM Terminology</a> in the React docs.</p>\n<p>Another particularly useful approach is to find nodes in the rendered tree which are equal to an expected node, specified by the test. However, usually you want to compare the nodes via value equality, not reference equality. Additionally, often it is preferable to match the rendered node on only a specified subset of its props. For example:</p>\n<pre><code class=\"language-jsx\">import findMatching from &apos;./findMatching&apos;; // we&apos;ll implement this later\n\nclass Page extends React.Component {\n  render() {\n    return (\n      &lt;div&gt;\n        &lt;div className=&quot;page-head&quot;&gt;\n          &lt;PageHeader title={this.props.title} unimportant=&quot;something&quot; /&gt;\n        &lt;/div&gt;\n        &lt;div className=&quot;page-body&quot;&gt;\n          {this.props.children}\n        &lt;/div&gt;\n      &lt;/div&gt;\n    );\n  }\n}\n\nconst titleText = &apos;My Page&apos;;\nconst renderedTree = shallowRender(&lt;Page title={titleText} /&gt;);\n\n// matches any PageHeader element where the &apos;title&apos; prop equals the value titleText\nassert(findMatching(renderedTree, &lt;PageHeader title={titleText} /&gt;) != null);\n\n// matches an element of any type where the &apos;title&apos; prop equals the value titleText\nassert(findMatching(renderedTree, {props: {title: titleText}}) != null);\n</code></pre>\n<p>In this example, we&apos;re finding an element of type <code>PageHeader</code>, which a matching <code>title</code> prop.</p>\n<p>In addition to being a clearer syntax for declaring the shape of the element you want to match, this approach allows us to ignore inconsequential details when finding matches, like the <code>unimportant</code> prop on the <code>&lt;PageHeader /&gt;</code> in the example above.</p>\n<p>A simple implementation of <code>findMatching</code> in the previous example might be something like:</p>\n<pre><code class=\"language-jsx\">import { findAll } from &apos;react-shallow-testutils&apos;;\nimport objectMatches from &apos;object-matches&apos;;\n\nfunction findAllMatching(tree, match) {\n  return findAll(tree, (el) =&gt;\n    (match.type ? el.type === match.type : true) &amp;&amp; // match type if specified\n    objectMatches(el.props, match.props) // match subset of props\n  );\n}\n\nfunction findMatching(tree, match) {\n  const found = findAllMatching(tree, match);\n  if (found.length !== 1) throw new Error(&apos;Did not find exactly one match&apos;);\n  return found[0];\n}\n</code></pre>\n<p>Additionally, you can make the output of failing tests a bit easier to read by pretty-printing the <code>ReactElement</code>s which are involved, for which you could use a module I wrote called <a href=\"https://www.npmjs.com/package/inspect-react-element\">inspect-react-element</a>.</p>\n<p>Now when an assertion fails, like:</p>\n<pre><code class=\"language-jsx\">expect(renderedTree).toContainReactNodeInTreeLike(&lt;PageHeader nonExistentProp /&gt;);\n</code></pre>\n<p>You would see the message:</p>\n<pre><code>Expected\n  &lt;div&gt;\n    &lt;div className=&quot;page-head&quot;&gt;\n      &lt;PageHeader title={undefined} unimportant=&quot;something&quot; /&gt;\n    &lt;/div&gt;\n    &lt;div className=&quot;page-body&quot; /&gt;\n  &lt;/div&gt;\nto contain a ReactNode in its tree like\n  &lt;PageHeader nonExistentProp={true} /&gt;\n</code></pre>\n<p>Here&apos;s the implementation of the custom <code>toContainReactNodeInTreeLike</code> Jasmine/Jest matcher used above, which prints an informative error message when a match is not found:</p>\n<pre><code class=\"language-jsx\">jasmine.addMatchers({\n  toContainReactNodeInTreeLike(expectedChild) {\n    const {actual, isNot} = this;\n    this.message = () =&gt;\n      clean`\n        Expected\n        ${indent(inspectReactElement(actual), 1)}\n        ${isNot ? &apos;not &apos; : &apos;&apos;}to contain a ReactNode in its tree like\n        ${indent(inspectReactElement(expectedChild), 1)}\n      `;\n\n    const found = findAllMatching(actual, expectedChild);\n    return found.length &gt; 0;\n  },\n});\n</code></pre>\n<p>In conclusion, try to write your shallow-render tests the way you&apos;d write tests using <code>TestUtils.findAllInRenderedTree</code> etc, but use utilities which do the same thing for shallow-rendered trees as the TestUtils do for rendered DOM components.</p>\n</div>",
    "body_text": "The React TestUtils shallow rendering feature allows us to test React components in true isolation from other component classes, and removes the need for a DOM in the test environment. It does this by allowing us to test the return value of a component's render method, without\ninstantiating any subcomponents.\nA basic example of how it can be used, assuming we're testing a component called <Page />:\nimport React from 'react/addons';\n\nconst headingElement = <h1 className=\"title\">title text</h1>;\n\n// shallow render the component under test\nconst renderer = React.addons.TestUtils.createRenderer();\nrenderer.render(<Page heading={headingElement} />);\nconst renderedTree = renderer.getRenderedOutput();\n\n// make assertions about the shallow rendered tree\nassert(renderedTree.type === 'div');\nassert(renderedTree.props.className === 'page');\nassert(renderedTree.props.children[0] === headingElement);\n\nIf we're testing a stateless component, we can use a helper function to simplify things a bit, as the rendered output will always be the same given the same props:\nimport React from 'react';\nimport shallowRender from 'react-shallow-render';\n\nconst headingElement = <h1 className=\"title\">title text</h1>;\n\n// shallow render the component under test\nconst renderedTree = shallowRender(<Page heading={headingElement} />);\n\n// and then do your assertions as before\n\nHowever, if we are asserting directly on the root ReactElement returned by the renderer (or a specific child or descendant of it), then we're coupling our test to the exact structure of the tree returned by the component's render method. This means that the test will break even if we change something superficial, like wrapping the rendered child in a <div>.\nInstead, we can query the rendered tree to find the nodes we're interested in:\nimport { findWithClass } from 'react-shallow-testutils';\n\nconst pageContentElement = findWithClass(renderedTree, 'page-content');\nassert(pageContentElement != null);\n\nYou can use a utility like the findAll function provided by the react-shallow-testutils npm package to traverse the rendered tree returned by shallowRender, finding all nodes which match a function. On top of that a number of useful finder utilities can be built, such as findWithClass shown in the example above (also included in the react-shallow-testutils package). findWithClass, as you might guess, is used to find an node with a className prop which includes the specified class.\nYou can draw a parallel between the finder functions which the React TestUtils provide for finding ReactComponent instances in the rendered component tree and these utilties which allow finding ReactElement objects in the rendered element tree for a component. If you're still unclear on the difference between React components and elements, see React (Virtual) DOM Terminology in the React docs.\nAnother particularly useful approach is to find nodes in the rendered tree which are equal to an expected node, specified by the test. However, usually you want to compare the nodes via value equality, not reference equality. Additionally, often it is preferable to match the rendered node on only a specified subset of its props. For example:\nimport findMatching from './findMatching'; // we'll implement this later\n\nclass Page extends React.Component {\n  render() {\n    return (\n      <div>\n        <div className=\"page-head\">\n          <PageHeader title={this.props.title} unimportant=\"something\" />\n        </div>\n        <div className=\"page-body\">\n          {this.props.children}\n        </div>\n      </div>\n    );\n  }\n}\n\nconst titleText = 'My Page';\nconst renderedTree = shallowRender(<Page title={titleText} />);\n\n// matches any PageHeader element where the 'title' prop equals the value titleText\nassert(findMatching(renderedTree, <PageHeader title={titleText} />) != null);\n\n// matches an element of any type where the 'title' prop equals the value titleText\nassert(findMatching(renderedTree, {props: {title: titleText}}) != null);\n\nIn this example, we're finding an element of type PageHeader, which a matching title prop.\nIn addition to being a clearer syntax for declaring the shape of the element you want to match, this approach allows us to ignore inconsequential details when finding matches, like the unimportant prop on the <PageHeader /> in the example above.\nA simple implementation of findMatching in the previous example might be something like:\nimport { findAll } from 'react-shallow-testutils';\nimport objectMatches from 'object-matches';\n\nfunction findAllMatching(tree, match) {\n  return findAll(tree, (el) =>\n    (match.type ? el.type === match.type : true) && // match type if specified\n    objectMatches(el.props, match.props) // match subset of props\n  );\n}\n\nfunction findMatching(tree, match) {\n  const found = findAllMatching(tree, match);\n  if (found.length !== 1) throw new Error('Did not find exactly one match');\n  return found[0];\n}\n\nAdditionally, you can make the output of failing tests a bit easier to read by pretty-printing the ReactElements which are involved, for which you could use a module I wrote called inspect-react-element.\nNow when an assertion fails, like:\nexpect(renderedTree).toContainReactNodeInTreeLike(<PageHeader nonExistentProp />);\n\nYou would see the message:\nExpected\n  <div>\n    <div className=\"page-head\">\n      <PageHeader title={undefined} unimportant=\"something\" />\n    </div>\n    <div className=\"page-body\" />\n  </div>\nto contain a ReactNode in its tree like\n  <PageHeader nonExistentProp={true} />\n\nHere's the implementation of the custom toContainReactNodeInTreeLike Jasmine/Jest matcher used above, which prints an informative error message when a match is not found:\njasmine.addMatchers({\n  toContainReactNodeInTreeLike(expectedChild) {\n    const {actual, isNot} = this;\n    this.message = () =>\n      clean`\n        Expected\n        ${indent(inspectReactElement(actual), 1)}\n        ${isNot ? 'not ' : ''}to contain a ReactNode in its tree like\n        ${indent(inspectReactElement(expectedChild), 1)}\n      `;\n\n    const found = findAllMatching(actual, expectedChild);\n    return found.length > 0;\n  },\n});\n\nIn conclusion, try to write your shallow-render tests the way you'd write tests using TestUtils.findAllInRenderedTree etc, but use utilities which do the same thing for shallow-rendered trees as the TestUtils do for rendered DOM components.\n",
    "body_preview": "The React TestUtils <a href=\"https://facebook.github.io/react/docs/test-utils.html#shallow-rendering\">shallow rendering</a> feature allows us to test React components in true isolation from other component classes, and removes the need for a DOM in the test environment. It does this by allowing us to test the return value of a component&apos;s <code>render</code> method, without\ninstantiating any subcomponents.",
    "created": "2015-09-15T21:38:21+08:00"
  },
  "15": {
    "id": "15",
    "slug": "how-do-binary-and-hexadecimal-numbers-work",
    "title": " How do binary and hexadecimal numbers work? ",
    "author": {
      "username": "James",
      "id": "7"
    },
    "body": "<div class=\"field-item even\" property=\"content:encoded\"><p><em>This post is from a series I&apos;m writing in which we&apos;ll learn how computers work, by writing a computer simulator in Javascript. However, I figured an explanation of binary and hexadecimal numbers is useful enough by itself, so here it is!</em></p>\n<p>Before explaining how computers load data into their working space and process it, it&apos;s valuable to understand binary and hexadecimal numbers. This is because computer hardware only understands binary values due to the physical characteristics of the electronic circuitry used to implement them. I won&apos;t go further into explaining the reasons why computer hardware works with values in binary form, but you can read more about it <a href=\"http://nookkin.com/articles/computer-science/why-computers-use-binary.ndoc\">here</a>.</p>\n<p>So what is binary? Binary is a &apos;base-2 number system&apos;. But what does that mean?</p>\n<p>Consider the number system we are all accustomed to using in our everyday lives, which is sometimes called the decimal system or base-10. It uses the digits 0, 1, 2, 3, 4, 5, 6, 7, 8, and 9 to represent the first 10 integers (whole-numbers) starting from zero. It is called base-10 because we have 10 digits to work with, from 0 to 9. But what happens after 9? With the number 10 we move over one column to the left, placing a &apos;1&apos; in the &apos;tens column&apos; followed by a &apos;0&apos; in the &apos;ones column&apos;. If we continue to increase our number in increments of 1, the digit in the &apos;ones column&apos; moves through the digits 0-9, until we get to 20, and so on until we eventually get to 100, placing a 1 in the &apos;hundreds column&apos;.</p>\n<p>Binary, or base-2, is much the same, except the only digits we have to work with are 0 and 1. Then how do we count? It&apos;s actually the same as in base-10, but after 0, then 1, we get to 10. Why? Because we have moved through all the digits we have to work with in the &apos;ones column&apos;, so we put a 1 in the next column to the left. However, in binary, that column is not the &apos;tens column&apos;, but rather the &apos;twos column&apos;. In the same way that in the decimal number 20 we are basically saying that we have &apos;two tens and zero ones&apos;, in the binary number 10 we are saying that we have &apos;one twos and zero ones&apos;. Next comes 11 (one twos and one ones) then 100 (one fours, zero twos, and zero ones).</p>\n<pre><code>   0\n   1\n  10\n  11\n 100\n 101\n</code></pre>\n<p>If it seems confusing that the columns, from right to left are &apos;ones&apos;, &apos;two&apos;, &apos;fours&apos;, rather than &apos;ones&apos;, &apos;tens&apos;, &apos;hundreds&apos; consider that in base-10 we only need a tens column once we&apos;ve exhausted all of the digits we can put in the ones column (0-9) once we reach the number 9, and the next whole number after 9 is 10, but in base-2 we only have 0 and 1, so after 0, then 1, we have exhausted all the digits for the ones column, and the next number we want to represent is the number that (in base-10) we would call &apos;two&apos;. By calling it the &apos;twos column&apos; we&apos;re still using the base-10 name for that number. It&apos;s valuable to understand that each number can be represented in both base-2 and base-10, or any other base for that matter, and the only difference is how we write them in digits (or however else we are recording them, such as in the two positions of a switch). As we continue on to larger and larger numbers we have the columns ones, twos, fours, eights, 16s, 32s, 64s and so on. You might recognise these as the powers of 2.</p>\n<p>Hexadecimal (base-16) is much like binary and decimal, except that there are 16 digits: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, a, b, c, d, e, and f. After 9 we start using letters of the alphabet to fill out the remaining digits to bring us to a total of 16. This means that as we are counting, after 9 we don&apos;t go to 10, but instead a, then b, c, e, and finally f, before getting to 10. Instead of the column to the left of the ones column being the tens column, in hexadecimal it is the &apos;16s column&apos;. Once we have moved through 0 to f in that column (moving through 0 to f in the ones column for each digit in the 16s column), the next column is the\n256s, 4096s, 65536s, and so on, moving up in the powers of 16. As the columns in binary (base-2) go up in powers of 2 as we move to the left, and the columns in decimal (base-10) in powers of 10, it makes sense that the columns in hexadecimal go up in powers of 16.</p>\n<pre><code> hex        binary    decimal\n   0             0          0\n   1             1          1\n   2            10          2\n   3            11          3\n   4           100          4\n   5           101          5\n   6           110          6\n   7           111          7\n   8          1000          8\n   9          1001          9\n   a          1010         10\n   b          1011         11\n   c          1100         12\n   d          1101         13\n   e          1110         14 \n   f          1111         15\n  10        1 0000         16\n  11        1 0001         17\n  12        1 0010         18\n  13        1 0011         19\n  14        1 0100         20\n  15        1 0101         21\n  16        1 0110         22\n  17        1 0111         23\n  18        1 1000         24\n  19        1 1001         25\n  1a        1 1010         26\n  1b        1 1011         27\n  1c        1 1100         28\n  1d        1 1101         29\n  1e        1 1110         30\n  1f        1 1111         31\n  20       10 0000         32\n  21       10 0001         33\n ...           ...        ...\n  3f       11 1111         63\n  40      100 0000         64\n  41      100 0001         65\n ...           ...        ...\n  7f      111 1111        127\n  80     1000 0000        128\n  81     1000 0001        129\n ...           ...        ...\n  f8     1111 1000        248\n  f9     1111 1001        249\n  fa     1111 1010        250\n  fb     1111 1011        251\n  fc     1111 1100        252\n  fd     1111 1101        253\n  fe     1111 1110        254\n  ff     1111 1111        255\n 100   1 0000 0000        256\n 101   1 0000 0001        257\n</code></pre>\n<p>If you&apos;ve ever wondered why power-of-2 numbers like 8, 16, 32, 64, and 256 come up a lot in computer programming, have a look at the binary and hex representations which those decimal values line up with. You&apos;ll see that there are 16 values (0-15, because we start counting at zero) which can be represented with (or &apos;fit inside&apos;) 4 binary digits, or 1 hex digit, and 256 values (0-255) which fit inside 8 binary digits/2 hex digits.</p>\n</div>",
    "body_text": "This post is from a series I'm writing in which we'll learn how computers work, by writing a computer simulator in Javascript. However, I figured an explanation of binary and hexadecimal numbers is useful enough by itself, so here it is!\nBefore explaining how computers load data into their working space and process it, it's valuable to understand binary and hexadecimal numbers. This is because computer hardware only understands binary values due to the physical characteristics of the electronic circuitry used to implement them. I won't go further into explaining the reasons why computer hardware works with values in binary form, but you can read more about it here.\nSo what is binary? Binary is a 'base-2 number system'. But what does that mean?\nConsider the number system we are all accustomed to using in our everyday lives, which is sometimes called the decimal system or base-10. It uses the digits 0, 1, 2, 3, 4, 5, 6, 7, 8, and 9 to represent the first 10 integers (whole-numbers) starting from zero. It is called base-10 because we have 10 digits to work with, from 0 to 9. But what happens after 9? With the number 10 we move over one column to the left, placing a '1' in the 'tens column' followed by a '0' in the 'ones column'. If we continue to increase our number in increments of 1, the digit in the 'ones column' moves through the digits 0-9, until we get to 20, and so on until we eventually get to 100, placing a 1 in the 'hundreds column'.\nBinary, or base-2, is much the same, except the only digits we have to work with are 0 and 1. Then how do we count? It's actually the same as in base-10, but after 0, then 1, we get to 10. Why? Because we have moved through all the digits we have to work with in the 'ones column', so we put a 1 in the next column to the left. However, in binary, that column is not the 'tens column', but rather the 'twos column'. In the same way that in the decimal number 20 we are basically saying that we have 'two tens and zero ones', in the binary number 10 we are saying that we have 'one twos and zero ones'. Next comes 11 (one twos and one ones) then 100 (one fours, zero twos, and zero ones).\n   0\n   1\n  10\n  11\n 100\n 101\n\nIf it seems confusing that the columns, from right to left are 'ones', 'two', 'fours', rather than 'ones', 'tens', 'hundreds' consider that in base-10 we only need a tens column once we've exhausted all of the digits we can put in the ones column (0-9) once we reach the number 9, and the next whole number after 9 is 10, but in base-2 we only have 0 and 1, so after 0, then 1, we have exhausted all the digits for the ones column, and the next number we want to represent is the number that (in base-10) we would call 'two'. By calling it the 'twos column' we're still using the base-10 name for that number. It's valuable to understand that each number can be represented in both base-2 and base-10, or any other base for that matter, and the only difference is how we write them in digits (or however else we are recording them, such as in the two positions of a switch). As we continue on to larger and larger numbers we have the columns ones, twos, fours, eights, 16s, 32s, 64s and so on. You might recognise these as the powers of 2.\nHexadecimal (base-16) is much like binary and decimal, except that there are 16 digits: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, a, b, c, d, e, and f. After 9 we start using letters of the alphabet to fill out the remaining digits to bring us to a total of 16. This means that as we are counting, after 9 we don't go to 10, but instead a, then b, c, e, and finally f, before getting to 10. Instead of the column to the left of the ones column being the tens column, in hexadecimal it is the '16s column'. Once we have moved through 0 to f in that column (moving through 0 to f in the ones column for each digit in the 16s column), the next column is the\n256s, 4096s, 65536s, and so on, moving up in the powers of 16. As the columns in binary (base-2) go up in powers of 2 as we move to the left, and the columns in decimal (base-10) in powers of 10, it makes sense that the columns in hexadecimal go up in powers of 16.\n hex        binary    decimal\n   0             0          0\n   1             1          1\n   2            10          2\n   3            11          3\n   4           100          4\n   5           101          5\n   6           110          6\n   7           111          7\n   8          1000          8\n   9          1001          9\n   a          1010         10\n   b          1011         11\n   c          1100         12\n   d          1101         13\n   e          1110         14 \n   f          1111         15\n  10        1 0000         16\n  11        1 0001         17\n  12        1 0010         18\n  13        1 0011         19\n  14        1 0100         20\n  15        1 0101         21\n  16        1 0110         22\n  17        1 0111         23\n  18        1 1000         24\n  19        1 1001         25\n  1a        1 1010         26\n  1b        1 1011         27\n  1c        1 1100         28\n  1d        1 1101         29\n  1e        1 1110         30\n  1f        1 1111         31\n  20       10 0000         32\n  21       10 0001         33\n ...           ...        ...\n  3f       11 1111         63\n  40      100 0000         64\n  41      100 0001         65\n ...           ...        ...\n  7f      111 1111        127\n  80     1000 0000        128\n  81     1000 0001        129\n ...           ...        ...\n  f8     1111 1000        248\n  f9     1111 1001        249\n  fa     1111 1010        250\n  fb     1111 1011        251\n  fc     1111 1100        252\n  fd     1111 1101        253\n  fe     1111 1110        254\n  ff     1111 1111        255\n 100   1 0000 0000        256\n 101   1 0000 0001        257\n\nIf you've ever wondered why power-of-2 numbers like 8, 16, 32, 64, and 256 come up a lot in computer programming, have a look at the binary and hex representations which those decimal values line up with. You'll see that there are 16 values (0-15, because we start counting at zero) which can be represented with (or 'fit inside') 4 binary digits, or 1 hex digit, and 256 values (0-255) which fit inside 8 binary digits/2 hex digits.\n",
    "body_preview": "<em>This post is from a series I&apos;m writing in which we&apos;ll learn how computers work, by writing a computer simulator in Javascript. However, I figured an explanation of binary and hexadecimal numbers is useful enough by itself, so here it is!</em>",
    "created": "2016-12-29T11:20:14+08:00"
  },
  "16": {
    "id": "16",
    "slug": "porting-pce-emulator-browser",
    "title": " Porting the PCE emulator to the browser ",
    "author": {
      "username": "James",
      "id": "7"
    },
    "body": "<div class=\"field-item even\" property=\"content:encoded\">\n\n<p>The <a href=\"https://archive.org\">Internet Archive</a> recently added the original Macintosh to the list of classic\ncomputers of which they provide emulation, so you can play with the software\ntitles in their archive <a href=\"https://archive.org/details/softwarelibrary_mac\">in your browser</a>, without installing anything. This is great because it provides\nthe same level of accessibility and convenience to emulation as you&apos;d expect of\nplaying a media file or viewing a document.</p>\n\n<p>When you start up the emulated computer on these pages of the Internet Archive,\nyou&apos;re running the <a href=\"http://hampa.ch/pce/\">PCE</a> emulator, originally a piece of software intended to run\nnatively on desktop operating systems, which has been adapted and recompiled to\nrun in your web browser. As the person who did the initial work of porting this\nemulator, I thought it would be worthwhile to provide a run-down of the tools and\ngross hacks which made this possible.</p>\n\n<p>Firstly, I got the emulator&apos;s C codebase to compile to ASM.js-compatible Javascript\nusing <a href=\"https://kripken.github.io/emscripten-site/\">Emscripten</a>. This involved adjusting the project&apos;s GNU Autotools-based build system\nto use Emscripten&apos;s emcc compiler executable instead of gcc. Emscripten&apos;s wrapper\nfor Autotools&apos; configure, called emconfigure, does most of the work here. Emscripten\nalso handles the mapping of native APIs to browser equivalents, so SDL rendering\ncalls become Canvas API calls, browser input events become SDL events, etc.</p>\n\n<p>Once the code compiled successfully and was able to start up in the browser without\ncrashing, the next issue to deal with was &apos;yielding&apos; to the browser event loop. In\nmodern operating systems, native programs can run as one unbroken thread of execution. The program can rely on the operating system to manage the program&apos;s usage of the CPU,\ninterrupting it periodically so that other programs can do some work. The program\ndoesn&apos;t need to know when this will happen or do anything special to enable it.\nWe call this &apos;preemptive multitasking&apos;. However, Javascript code running in the\nweb browser can&apos;t just run indefinitely, it must regularly yield control back to\nthe browser so that I/O can be performed (updating the screen, triggering mouse and\nkeyboard event handlers, etc). So I had to break the control flow of the emulator\ncode up, so that it could a &apos;chunk&apos; of work, and then allow the browser to do it&apos;s\nthing before the next chunk of work. You could draw a comparison between this and\na &apos;cooperative multitasking&apos; operating system.</p>\n\n<p>The way I achieved this was pretty blunt, but it worked. The emulator initializes\nnormally, and then instead of running the emulated system in an infinite loop, <a href=\"https://github.com/jsdf/pce/blob/6dee9246bf6cd265e3796a849d352aa4ef798037/src/arch/macplus/cmd_68k.c#L416\">it\nprovides the Emscripten runtime with a callback function</a> which, when called, will\n<a href=\"https://github.com/jsdf/pce/blob/6dee9246bf6cd265e3796a849d352aa4ef798037/src/arch/macplus/cmd_68k.c#L443\">run a few clock cycles of the emulated computer&apos;s CPU</a>. By &apos;a few&apos;, I mean a few thousand. Emscripten calls this callback many times a second. Ideally we could yield back to the browser after every cycle\nof the CPU, so that we could collect the latest inputs from the mouse and keyboard, and update the screen if necessary, but there are limits on how often the browser can process\nchunks of Javascript work in its event loop (enqueued via a browser API call such as\nsetTimeout or requestAnimationFrame) which mean that to achieve reasonable performance\nof the emulator we need to run a bunch of cycles for each yield. I hand-tuned this,\nand found that ~10000 cycles per yield gives a decent balance of speed and responsiveness\nof the emulator.</p>\n\n<p>Finally, there was the issue of mouse pointer integration. At this point, moving\nyour mouse around the browser window resulted in the relative mouse movements being\npassed to the emulator, which in turn are provided to Mac OS as emulated hardware\nmouse movements. Mac OS moves the mouse in on the emulator&apos;s screen, but it&apos;s not\nnecessarily in the same place as your OS&apos; real mouse pointer. I felt I could do better,\nso I added a super gross hack to actually update the emulated Mac OS mouse position\nto match your real mouse cursor&apos;s position on the screen. You can see that happening\n<a href=\"https://github.com/jsdf/pce/blob/6dee9246bf6cd265e3796a849d352aa4ef798037/src/arch/macplus/cmd_68k.c#L446-L458\">here</a>. I realised that in classic Mac OS, the mouse\nposition is stored in a few fixed absolute locations in the computer&apos;s memory, called\n&apos;low memory globals&apos;. Basically, I directly write the mouse position value into the\nemulated computer&apos;s memory. Gross, right? But it works great, as you can see by\n<a href=\"https://jamesfriend.com.au/pce-js/\">drawing some stuff in Kid Pix</a>. The mouse\nresponds perfectly. You can read more about low memory globals in <a href=\"http://www.folklore.org/StoryView.py?story=Mea_Culpa.txt\">this folklore.org story</a>.\n</p>\n\n<p>I&apos;m really glad Classic Mac emulation made its way onto archive.org, because I\nthink everybody should have the opportunity to experience computing history, and\nthe original Macintosh is an essential piece of that history.</p>\n\n<p>If you&apos;re wondering about my rationale for porting emulators\nto the browser, have a read of <a href=\"https://jamesfriend.com.au/why-port-emulators-browser\">my previous post on the subject</a></p>.\n\n\n</div>",
    "body_text": "\n\nThe Internet Archive recently added the original Macintosh to the list of classic\ncomputers of which they provide emulation, so you can play with the software\ntitles in their archive in your browser, without installing anything. This is great because it provides\nthe same level of accessibility and convenience to emulation as you'd expect of\nplaying a media file or viewing a document.\n\nWhen you start up the emulated computer on these pages of the Internet Archive,\nyou're running the PCE emulator, originally a piece of software intended to run\nnatively on desktop operating systems, which has been adapted and recompiled to\nrun in your web browser. As the person who did the initial work of porting this\nemulator, I thought it would be worthwhile to provide a run-down of the tools and\ngross hacks which made this possible.\n\nFirstly, I got the emulator's C codebase to compile to ASM.js-compatible Javascript\nusing Emscripten. This involved adjusting the project's GNU Autotools-based build system\nto use Emscripten's emcc compiler executable instead of gcc. Emscripten's wrapper\nfor Autotools' configure, called emconfigure, does most of the work here. Emscripten\nalso handles the mapping of native APIs to browser equivalents, so SDL rendering\ncalls become Canvas API calls, browser input events become SDL events, etc.\n\nOnce the code compiled successfully and was able to start up in the browser without\ncrashing, the next issue to deal with was 'yielding' to the browser event loop. In\nmodern operating systems, native programs can run as one unbroken thread of execution. The program can rely on the operating system to manage the program's usage of the CPU,\ninterrupting it periodically so that other programs can do some work. The program\ndoesn't need to know when this will happen or do anything special to enable it.\nWe call this 'preemptive multitasking'. However, Javascript code running in the\nweb browser can't just run indefinitely, it must regularly yield control back to\nthe browser so that I/O can be performed (updating the screen, triggering mouse and\nkeyboard event handlers, etc). So I had to break the control flow of the emulator\ncode up, so that it could a 'chunk' of work, and then allow the browser to do it's\nthing before the next chunk of work. You could draw a comparison between this and\na 'cooperative multitasking' operating system.\n\nThe way I achieved this was pretty blunt, but it worked. The emulator initializes\nnormally, and then instead of running the emulated system in an infinite loop, it\nprovides the Emscripten runtime with a callback function which, when called, will\nrun a few clock cycles of the emulated computer's CPU. By 'a few', I mean a few thousand. Emscripten calls this callback many times a second. Ideally we could yield back to the browser after every cycle\nof the CPU, so that we could collect the latest inputs from the mouse and keyboard, and update the screen if necessary, but there are limits on how often the browser can process\nchunks of Javascript work in its event loop (enqueued via a browser API call such as\nsetTimeout or requestAnimationFrame) which mean that to achieve reasonable performance\nof the emulator we need to run a bunch of cycles for each yield. I hand-tuned this,\nand found that ~10000 cycles per yield gives a decent balance of speed and responsiveness\nof the emulator.\n\nFinally, there was the issue of mouse pointer integration. At this point, moving\nyour mouse around the browser window resulted in the relative mouse movements being\npassed to the emulator, which in turn are provided to Mac OS as emulated hardware\nmouse movements. Mac OS moves the mouse in on the emulator's screen, but it's not\nnecessarily in the same place as your OS' real mouse pointer. I felt I could do better,\nso I added a super gross hack to actually update the emulated Mac OS mouse position\nto match your real mouse cursor's position on the screen. You can see that happening\nhere. I realised that in classic Mac OS, the mouse\nposition is stored in a few fixed absolute locations in the computer's memory, called\n'low memory globals'. Basically, I directly write the mouse position value into the\nemulated computer's memory. Gross, right? But it works great, as you can see by\ndrawing some stuff in Kid Pix. The mouse\nresponds perfectly. You can read more about low memory globals in this folklore.org story.\n\n\nI'm really glad Classic Mac emulation made its way onto archive.org, because I\nthink everybody should have the opportunity to experience computing history, and\nthe original Macintosh is an essential piece of that history.\n\nIf you're wondering about my rationale for porting emulators\nto the browser, have a read of my previous post on the subject.\n\n\n",
    "body_preview": "The <a href=\"https://archive.org\">Internet Archive</a> recently added the original Macintosh to the list of classic\ncomputers of which they provide emulation, so you can play with the software\ntitles in their archive <a href=\"https://archive.org/details/softwarelibrary_mac\">in your browser</a>, without installing anything. This is great because it provides\nthe same level of accessibility and convenience to emulation as you&apos;d expect of\nplaying a media file or viewing a document.",
    "created": "2017-04-11T12:18:40-08:00"
  }
}